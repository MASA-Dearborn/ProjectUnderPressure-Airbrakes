
Airbrakes2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be0  08004be0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004be0  08004be0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be0  08004be0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000007c  08004c64  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004c64  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9f1  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  0002aa9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa0d  00000000  00000000  0002de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca72  00000000  00000000  00048895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f428  00000000  00000000  00055307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f472f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000f4780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048b4 	.word	0x080048b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080048b4 	.word	0x080048b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2007      	movs	r0, #7
 8000abc:	f000 f9ea 	bl	8000e94 <bno055_writeData>
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <bno055_setOperationMode>:
    bno055_opmode_t mode;
    bno055_readData(BNO055_OPR_MODE, &mode, 1);
    return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
    bno055_writeData(BNO055_OPR_MODE, mode);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	203d      	movs	r0, #61	; 0x3d
 8000ad8:	f000 f9dc 	bl	8000e94 <bno055_writeData>
    if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <bno055_setOperationMode+0x22>
        bno055_delay(19);
 8000ae2:	2013      	movs	r0, #19
 8000ae4:	f000 f9ca 	bl	8000e7c <bno055_delay>
    } else {
        bno055_delay(7);
    }
}
 8000ae8:	e002      	b.n	8000af0 <bno055_setOperationMode+0x28>
        bno055_delay(7);
 8000aea:	2007      	movs	r0, #7
 8000aec:	f000 f9c6 	bl	8000e7c <bno055_delay>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ffe3 	bl	8000ac8 <bno055_setOperationMode>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000b0a:	200c      	movs	r0, #12
 8000b0c:	f7ff ffdc 	bl	8000ac8 <bno055_setOperationMode>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000b18:	2120      	movs	r1, #32
 8000b1a:	203f      	movs	r0, #63	; 0x3f
 8000b1c:	f000 f9ba 	bl	8000e94 <bno055_writeData>
    bno055_delay(700);
 8000b20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000b24:	f000 f9aa 	bl	8000e7c <bno055_delay>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <bno055_setup>:
    uint8_t t;
    bno055_readData(BNO055_TEMP, &t, 1);
    return t;
}

void bno055_setup() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
    bno055_reset();
 8000b32:	f7ff ffef 	bl	8000b14 <bno055_reset>

    uint8_t id = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
    bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fa93 	bl	800106c <bno055_readData>
    if (id != BNO055_ID) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2ba0      	cmp	r3, #160	; 0xa0
 8000b4a:	d004      	beq.n	8000b56 <bno055_setup+0x2a>
        printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <bno055_setup+0x4c>)
 8000b52:	f002 feab 	bl	80038ac <iprintf>
    }
    bno055_setPage(0);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ffa8 	bl	8000aac <bno055_setPage>
    bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	203f      	movs	r0, #63	; 0x3f
 8000b60:	f000 f998 	bl	8000e94 <bno055_writeData>

    // Select BNO055 config mode
    bno055_setOperationModeConfig();
 8000b64:	f7ff ffc8 	bl	8000af8 <bno055_setOperationModeConfig>
    bno055_delay(10);
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f000 f987 	bl	8000e7c <bno055_delay>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	080048cc 	.word	0x080048cc

08000b7c <bno055_getVector>:
    }

    bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b093      	sub	sp, #76	; 0x4c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
    bno055_setPage(0);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ff90 	bl	8000aac <bno055_setPage>
    uint8_t buffer[8];    // Quaternion need 8 bytes

    if (vec == BNO055_VECTOR_QUATERNION)
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b20      	cmp	r3, #32
 8000b90:	d107      	bne.n	8000ba2 <bno055_getVector+0x26>
        bno055_readData(vec, buffer, 8);
 8000b92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2208      	movs	r2, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fa66 	bl	800106c <bno055_readData>
 8000ba0:	e006      	b.n	8000bb0 <bno055_getVector+0x34>
    else
        bno055_readData(vec, buffer, 6);
 8000ba2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2206      	movs	r2, #6
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa5e 	bl	800106c <bno055_readData>

    double scale = 1;
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <bno055_getVector+0x26c>)
 8000bb6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	2b0e      	cmp	r3, #14
 8000bbe:	d109      	bne.n	8000bd4 <bno055_getVector+0x58>
        scale = magScale;
 8000bc0:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <bno055_getVector+0x270>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc95 	bl	80004f4 <__aeabi_ui2d>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000bd2:	e038      	b.n	8000c46 <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d005      	beq.n	8000be6 <bno055_getVector+0x6a>
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b28      	cmp	r3, #40	; 0x28
 8000bde:	d002      	beq.n	8000be6 <bno055_getVector+0x6a>
               vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	2b2e      	cmp	r3, #46	; 0x2e
 8000be4:	d109      	bne.n	8000bfa <bno055_getVector+0x7e>
        scale = accelScale;
 8000be6:	4b82      	ldr	r3, [pc, #520]	; (8000df0 <bno055_getVector+0x274>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fc82 	bl	80004f4 <__aeabi_ui2d>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000bf8:	e025      	b.n	8000c46 <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	2b14      	cmp	r3, #20
 8000bfe:	d109      	bne.n	8000c14 <bno055_getVector+0x98>
        scale = angularRateScale;
 8000c00:	4b7c      	ldr	r3, [pc, #496]	; (8000df4 <bno055_getVector+0x278>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fc75 	bl	80004f4 <__aeabi_ui2d>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000c12:	e018      	b.n	8000c46 <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_EULER) {
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b1a      	cmp	r3, #26
 8000c18:	d109      	bne.n	8000c2e <bno055_getVector+0xb2>
        scale = eulerScale;
 8000c1a:	4b77      	ldr	r3, [pc, #476]	; (8000df8 <bno055_getVector+0x27c>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc68 	bl	80004f4 <__aeabi_ui2d>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000c2c:	e00b      	b.n	8000c46 <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d108      	bne.n	8000c46 <bno055_getVector+0xca>
        scale = quaScale;
 8000c34:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <bno055_getVector+0x280>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fc5b 	bl	80004f4 <__aeabi_ui2d>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
    if (vec == BNO055_VECTOR_QUATERNION) {
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b20      	cmp	r3, #32
 8000c58:	d160      	bne.n	8000d1c <bno055_getVector+0x1a0>
        xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc51 	bl	8000514 <__aeabi_i2d>
 8000c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000c76:	f7ff fde1 	bl	800083c <__aeabi_ddiv>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff fec3 	bl	8000a0c <__aeabi_d2f>
 8000c86:	4603      	mov	r3, r0
 8000c88:	61bb      	str	r3, [r7, #24]
        xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc39 	bl	8000514 <__aeabi_i2d>
 8000ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ca6:	f7ff fdc9 	bl	800083c <__aeabi_ddiv>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f7ff feab 	bl	8000a0c <__aeabi_d2f>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	61fb      	str	r3, [r7, #28]
        xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000cba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc21 	bl	8000514 <__aeabi_i2d>
 8000cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000cd6:	f7ff fdb1 	bl	800083c <__aeabi_ddiv>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fe93 	bl	8000a0c <__aeabi_d2f>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	623b      	str	r3, [r7, #32]
        xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc09 	bl	8000514 <__aeabi_i2d>
 8000d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d06:	f7ff fd99 	bl	800083c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fe7b 	bl	8000a0c <__aeabi_d2f>
 8000d16:	4603      	mov	r3, r0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1a:	e047      	b.n	8000dac <bno055_getVector+0x230>
    } else {
        xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000d1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fbf0 	bl	8000514 <__aeabi_i2d>
 8000d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d38:	f7ff fd80 	bl	800083c <__aeabi_ddiv>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fe62 	bl	8000a0c <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	61fb      	str	r3, [r7, #28]
        xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fbd8 	bl	8000514 <__aeabi_i2d>
 8000d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d68:	f7ff fd68 	bl	800083c <__aeabi_ddiv>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4610      	mov	r0, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fe4a 	bl	8000a0c <__aeabi_d2f>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	623b      	str	r3, [r7, #32]
        xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fbc0 	bl	8000514 <__aeabi_i2d>
 8000d94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d98:	f7ff fd50 	bl	800083c <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff fe32 	bl	8000a0c <__aeabi_d2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xyz;
 8000dac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc2:	ee06 0a10 	vmov	s12, r0
 8000dc6:	ee06 1a90 	vmov	s13, r1
 8000dca:	ee07 2a10 	vmov	s14, r2
 8000dce:	ee07 3a90 	vmov	s15, r3
}
 8000dd2:	eeb0 0a46 	vmov.f32	s0, s12
 8000dd6:	eef0 0a66 	vmov.f32	s1, s13
 8000dda:	eeb0 1a47 	vmov.f32	s2, s14
 8000dde:	eef0 1a67 	vmov.f32	s3, s15
 8000de2:	374c      	adds	r7, #76	; 0x4c
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	3ff00000 	.word	0x3ff00000
 8000dec:	20000006 	.word	0x20000006
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000002 	.word	0x20000002
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	20000008 	.word	0x20000008

08000e00 <bno055_getVectorLinearAccel>:
    return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
    return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8000e06:	2028      	movs	r0, #40	; 0x28
 8000e08:	f7ff feb8 	bl	8000b7c <bno055_getVector>
 8000e0c:	eeb0 6a40 	vmov.f32	s12, s0
 8000e10:	eef0 6a60 	vmov.f32	s13, s1
 8000e14:	eeb0 7a41 	vmov.f32	s14, s2
 8000e18:	eef0 7a61 	vmov.f32	s15, s3
 8000e1c:	ed87 6a04 	vstr	s12, [r7, #16]
 8000e20:	edc7 6a05 	vstr	s13, [r7, #20]
 8000e24:	ed87 7a06 	vstr	s14, [r7, #24]
 8000e28:	edc7 7a07 	vstr	s15, [r7, #28]
 8000e2c:	6938      	ldr	r0, [r7, #16]
 8000e2e:	6979      	ldr	r1, [r7, #20]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	ee06 0a10 	vmov	s12, r0
 8000e38:	ee06 1a90 	vmov	s13, r1
 8000e3c:	ee07 2a10 	vmov	s14, r2
 8000e40:	ee07 3a90 	vmov	s15, r3
}
 8000e44:	eeb0 0a46 	vmov.f32	s0, s12
 8000e48:	eef0 0a66 	vmov.f32	s1, s13
 8000e4c:	eeb0 1a47 	vmov.f32	s2, s14
 8000e50:	eef0 1a67 	vmov.f32	s3, s15
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <bno055_assignI2C>:


#include "bno055_stm32.h"
I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    _bno055_i2c_port = hi2c_device;
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <bno055_assignI2C+0x1c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000098 	.word	0x20000098

08000e7c <bno055_delay>:

void bno055_delay(int time) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
    osDelay(time);
#else
    HAL_Delay(time);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fc6e 	bl	8001768 <HAL_Delay>
#endif
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
    uint8_t txdata[2] = {reg, data};
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	733b      	strb	r3, [r7, #12]
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	737b      	strb	r3, [r7, #13]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <bno055_writeData+0x184>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2302      	movs	r3, #2
 8000eba:	2150      	movs	r1, #80	; 0x50
 8000ebc:	f000 ff78 	bl	8001db0 <HAL_I2C_Master_Transmit>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	75fb      	strb	r3, [r7, #23]
                                     txdata, sizeof(txdata), 10);
    if (status == HAL_OK) {
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a0 	beq.w	800100c <bno055_writeData+0x178>
        return;
    }

    if (status == HAL_ERROR) {
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d103      	bne.n	8000eda <bno055_writeData+0x46>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000ed2:	4852      	ldr	r0, [pc, #328]	; (800101c <bno055_writeData+0x188>)
 8000ed4:	f002 fd70 	bl	80039b8 <puts>
 8000ed8:	e012      	b.n	8000f00 <bno055_writeData+0x6c>
    } else if (status == HAL_TIMEOUT) {
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d103      	bne.n	8000ee8 <bno055_writeData+0x54>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ee0:	484f      	ldr	r0, [pc, #316]	; (8001020 <bno055_writeData+0x18c>)
 8000ee2:	f002 fd69 	bl	80039b8 <puts>
 8000ee6:	e00b      	b.n	8000f00 <bno055_writeData+0x6c>
    } else if (status == HAL_BUSY) {
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d103      	bne.n	8000ef6 <bno055_writeData+0x62>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000eee:	484d      	ldr	r0, [pc, #308]	; (8001024 <bno055_writeData+0x190>)
 8000ef0:	f002 fd62 	bl	80039b8 <puts>
 8000ef4:	e004      	b.n	8000f00 <bno055_writeData+0x6c>
    } else {
        printf("Unknown status data %d", status);
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	484b      	ldr	r0, [pc, #300]	; (8001028 <bno055_writeData+0x194>)
 8000efc:	f002 fcd6 	bl	80038ac <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000f00:	4b45      	ldr	r3, [pc, #276]	; (8001018 <bno055_writeData+0x184>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 f94b 	bl	80021a0 <HAL_I2C_GetError>
 8000f0a:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d07e      	beq.n	8001010 <bno055_writeData+0x17c>
        return;
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d103      	bne.n	8000f20 <bno055_writeData+0x8c>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8000f18:	4844      	ldr	r0, [pc, #272]	; (800102c <bno055_writeData+0x198>)
 8000f1a:	f002 fd4d 	bl	80039b8 <puts>
 8000f1e:	e021      	b.n	8000f64 <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d103      	bne.n	8000f2e <bno055_writeData+0x9a>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 8000f26:	4842      	ldr	r0, [pc, #264]	; (8001030 <bno055_writeData+0x19c>)
 8000f28:	f002 fd46 	bl	80039b8 <puts>
 8000f2c:	e01a      	b.n	8000f64 <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_AF) {
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d103      	bne.n	8000f3c <bno055_writeData+0xa8>
        printf("HAL_I2C_ERROR_AF\r\n");
 8000f34:	483f      	ldr	r0, [pc, #252]	; (8001034 <bno055_writeData+0x1a0>)
 8000f36:	f002 fd3f 	bl	80039b8 <puts>
 8000f3a:	e013      	b.n	8000f64 <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_OVR) {
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d103      	bne.n	8000f4a <bno055_writeData+0xb6>
        printf("HAL_I2C_ERROR_OVR\r\n");
 8000f42:	483d      	ldr	r0, [pc, #244]	; (8001038 <bno055_writeData+0x1a4>)
 8000f44:	f002 fd38 	bl	80039b8 <puts>
 8000f48:	e00c      	b.n	8000f64 <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_DMA) {
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d103      	bne.n	8000f58 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <bno055_writeData+0x1a8>)
 8000f52:	f002 fd31 	bl	80039b8 <puts>
 8000f56:	e005      	b.n	8000f64 <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	d102      	bne.n	8000f64 <bno055_writeData+0xd0>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000f5e:	4838      	ldr	r0, [pc, #224]	; (8001040 <bno055_writeData+0x1ac>)
 8000f60:	f002 fd2a 	bl	80039b8 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <bno055_writeData+0x184>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 f90b 	bl	8002184 <HAL_I2C_GetState>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <bno055_writeData+0xec>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000f78:	4832      	ldr	r0, [pc, #200]	; (8001044 <bno055_writeData+0x1b0>)
 8000f7a:	f002 fd1d 	bl	80039b8 <puts>
 8000f7e:	e048      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_READY) {
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d103      	bne.n	8000f8e <bno055_writeData+0xfa>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <bno055_writeData+0x1b0>)
 8000f88:	f002 fd16 	bl	80039b8 <puts>
 8000f8c:	e041      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY) {
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b24      	cmp	r3, #36	; 0x24
 8000f92:	d103      	bne.n	8000f9c <bno055_writeData+0x108>
        printf("HAL_I2C_STATE_BUSY\r\n");
 8000f94:	482c      	ldr	r0, [pc, #176]	; (8001048 <bno055_writeData+0x1b4>)
 8000f96:	f002 fd0f 	bl	80039b8 <puts>
 8000f9a:	e03a      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b21      	cmp	r3, #33	; 0x21
 8000fa0:	d103      	bne.n	8000faa <bno055_writeData+0x116>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000fa2:	482a      	ldr	r0, [pc, #168]	; (800104c <bno055_writeData+0x1b8>)
 8000fa4:	f002 fd08 	bl	80039b8 <puts>
 8000fa8:	e033      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b22      	cmp	r3, #34	; 0x22
 8000fae:	d103      	bne.n	8000fb8 <bno055_writeData+0x124>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <bno055_writeData+0x1bc>)
 8000fb2:	f002 fd01 	bl	80039b8 <puts>
 8000fb6:	e02c      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b28      	cmp	r3, #40	; 0x28
 8000fbc:	d103      	bne.n	8000fc6 <bno055_writeData+0x132>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 8000fbe:	4825      	ldr	r0, [pc, #148]	; (8001054 <bno055_writeData+0x1c0>)
 8000fc0:	f002 fcfa 	bl	80039b8 <puts>
 8000fc4:	e025      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b29      	cmp	r3, #41	; 0x29
 8000fca:	d103      	bne.n	8000fd4 <bno055_writeData+0x140>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000fcc:	4822      	ldr	r0, [pc, #136]	; (8001058 <bno055_writeData+0x1c4>)
 8000fce:	f002 fcf3 	bl	80039b8 <puts>
 8000fd2:	e01e      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8000fd8:	d103      	bne.n	8000fe2 <bno055_writeData+0x14e>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000fda:	4820      	ldr	r0, [pc, #128]	; (800105c <bno055_writeData+0x1c8>)
 8000fdc:	f002 fcec 	bl	80039b8 <puts>
 8000fe0:	e017      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_ABORT) {
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b60      	cmp	r3, #96	; 0x60
 8000fe6:	d103      	bne.n	8000ff0 <bno055_writeData+0x15c>
        printf("HAL_I2C_STATE_ABORT\r\n");
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <bno055_writeData+0x1cc>)
 8000fea:	f002 fce5 	bl	80039b8 <puts>
 8000fee:	e010      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2ba0      	cmp	r3, #160	; 0xa0
 8000ff4:	d103      	bne.n	8000ffe <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <bno055_writeData+0x1d0>)
 8000ff8:	f002 fcde 	bl	80039b8 <puts>
 8000ffc:	e009      	b.n	8001012 <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_ERROR) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2be0      	cmp	r3, #224	; 0xe0
 8001002:	d106      	bne.n	8001012 <bno055_writeData+0x17e>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8001004:	4818      	ldr	r0, [pc, #96]	; (8001068 <bno055_writeData+0x1d4>)
 8001006:	f002 fcd7 	bl	80039b8 <puts>
 800100a:	e002      	b.n	8001012 <bno055_writeData+0x17e>
        return;
 800100c:	bf00      	nop
 800100e:	e000      	b.n	8001012 <bno055_writeData+0x17e>
        return;
 8001010:	bf00      	nop
    }
    // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
    // return;
}
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000098 	.word	0x20000098
 800101c:	08004908 	.word	0x08004908
 8001020:	0800492c 	.word	0x0800492c
 8001024:	08004954 	.word	0x08004954
 8001028:	08004978 	.word	0x08004978
 800102c:	08004990 	.word	0x08004990
 8001030:	080049a4 	.word	0x080049a4
 8001034:	080049b8 	.word	0x080049b8
 8001038:	080049cc 	.word	0x080049cc
 800103c:	080049e0 	.word	0x080049e0
 8001040:	080049f4 	.word	0x080049f4
 8001044:	08004a0c 	.word	0x08004a0c
 8001048:	08004a24 	.word	0x08004a24
 800104c:	08004a38 	.word	0x08004a38
 8001050:	08004a50 	.word	0x08004a50
 8001054:	08004a68 	.word	0x08004a68
 8001058:	08004a80 	.word	0x08004a80
 800105c:	08004aa0 	.word	0x08004aa0
 8001060:	08004ac0 	.word	0x08004ac0
 8001064:	08004ad8 	.word	0x08004ad8
 8001068:	08004af0 	.word	0x08004af0

0800106c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <bno055_readData+0x40>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	1dfa      	adds	r2, r7, #7
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2150      	movs	r1, #80	; 0x50
 800108a:	f000 fe91 	bl	8001db0 <HAL_I2C_Master_Transmit>
                            100);
    HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <bno055_readData+0x40>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	2150      	movs	r1, #80	; 0x50
 800109e:	f000 ff7b 	bl	8001f98 <HAL_I2C_Master_Receive>
                           100);
    // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
    // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000098 	.word	0x20000098

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fae2 	bl	800167e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f891 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 f915 	bl	80012ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c2:	f000 f8d3 	bl	800126c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bno055_assignI2C(&hi2c1);
 80010c6:	4841      	ldr	r0, [pc, #260]	; (80011cc <main+0x11c>)
 80010c8:	f7ff fec8 	bl	8000e5c <bno055_assignI2C>
  bno055_setup();
 80010cc:	f7ff fd2e 	bl	8000b2c <bno055_setup>
  bno055_setOperationModeNDOF();
 80010d0:	f7ff fd19 	bl	8000b06 <bno055_setOperationModeNDOF>

  int airbrakesFlag = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	617b      	str	r3, [r7, #20]
  while (1)
  {
	  bno055_vector_t l = bno055_getVectorLinearAccel();
 80010d8:	f7ff fe92 	bl	8000e00 <bno055_getVectorLinearAccel>
 80010dc:	eeb0 6a40 	vmov.f32	s12, s0
 80010e0:	eef0 6a60 	vmov.f32	s13, s1
 80010e4:	eeb0 7a41 	vmov.f32	s14, s2
 80010e8:	eef0 7a61 	vmov.f32	s15, s3
 80010ec:	ed87 6a01 	vstr	s12, [r7, #4]
 80010f0:	edc7 6a02 	vstr	s13, [r7, #8]
 80010f4:	ed87 7a03 	vstr	s14, [r7, #12]
 80010f8:	edc7 7a04 	vstr	s15, [r7, #16]
	  Ax=l.x;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <main+0x120>)
 8001100:	6013      	str	r3, [r2, #0]
	  Ay=l.y;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <main+0x124>)
 8001106:	6013      	str	r3, [r2, #0]
	  Az=l.z;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <main+0x128>)
 800110c:	6013      	str	r3, [r2, #0]

	  if((l.z>=4 || l.x >=4 || l.y>=4) && airbrakesFlag==2)
 800110e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001112:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	da11      	bge.n	8001144 <main+0x94>
 8001120:	edd7 7a02 	vldr	s15, [r7, #8]
 8001124:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	da08      	bge.n	8001144 <main+0x94>
 8001132:	edd7 7a03 	vldr	s15, [r7, #12]
 8001136:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	db04      	blt.n	800114e <main+0x9e>
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d101      	bne.n	800114e <main+0x9e>
	                  {

	                    airbrakesFlag=1;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
	                  }
	            if (airbrakesFlag == 1)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1c1      	bne.n	80010d8 <main+0x28>
	            {
	                HAL_Delay(16180);
 8001154:	f643 7034 	movw	r0, #16180	; 0x3f34
 8001158:	f000 fb06 	bl	8001768 <HAL_Delay>
	                //extend airbrakes
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <main+0x12c>)
 8001162:	f000 fd7d 	bl	8001c60 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <main+0x12c>)
 800116c:	f000 fd78 	bl	8001c60 <HAL_GPIO_WritePin>

	                HAL_Delay(2200);
 8001170:	f640 0098 	movw	r0, #2200	; 0x898
 8001174:	f000 faf8 	bl	8001768 <HAL_Delay>
	                //stop extending
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <main+0x12c>)
 800117e:	f000 fd6f 	bl	8001c60 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <main+0x12c>)
 8001188:	f000 fd6a 	bl	8001c60 <HAL_GPIO_WritePin>

	                HAL_Delay(22270);
 800118c:	f245 60fe 	movw	r0, #22270	; 0x56fe
 8001190:	f000 faea 	bl	8001768 <HAL_Delay>
	                // start retracting
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2110      	movs	r1, #16
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <main+0x12c>)
 800119a:	f000 fd61 	bl	8001c60 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2120      	movs	r1, #32
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <main+0x12c>)
 80011a4:	f000 fd5c 	bl	8001c60 <HAL_GPIO_WritePin>

	                HAL_Delay(2700);
 80011a8:	f640 208c 	movw	r0, #2700	; 0xa8c
 80011ac:	f000 fadc 	bl	8001768 <HAL_Delay>
	                // stop retracting
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2110      	movs	r1, #16
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <main+0x12c>)
 80011b6:	f000 fd53 	bl	8001c60 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <main+0x12c>)
 80011c0:	f000 fd4e 	bl	8001c60 <HAL_GPIO_WritePin>

	                airbrakesFlag = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  {
 80011c8:	e786      	b.n	80010d8 <main+0x28>
 80011ca:	bf00      	nop
 80011cc:	2000009c 	.word	0x2000009c
 80011d0:	200000f0 	.word	0x200000f0
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	200000f8 	.word	0x200000f8
 80011dc:	48000400 	.word	0x48000400

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	; 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fb54 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f001 faf5 	bl	80027f4 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001210:	f000 f8aa 	bl	8001368 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001214:	2310      	movs	r3, #16
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fb37 	bl	80028a0 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001238:	f000 f896 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f001 ff85 	bl	8003164 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001260:	f000 f882 	bl	8001368 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3758      	adds	r7, #88	; 0x58
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <MX_I2C1_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012a8:	f000 fcf2 	bl	8001c90 <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 f859 	bl	8001368 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012ba:	f001 f9f5 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 f850 	bl	8001368 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012cc:	f001 fa37 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f847 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000009c 	.word	0x2000009c
 80012e4:	40005400 	.word	0x40005400
 80012e8:	00707cbb 	.word	0x00707cbb

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_GPIO_Init+0x74>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <MX_GPIO_Init+0x74>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_GPIO_Init+0x74>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_GPIO_Init+0x74>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <MX_GPIO_Init+0x74>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_GPIO_Init+0x74>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2130      	movs	r1, #48	; 0x30
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0x78>)
 8001338:	f000 fc92 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800133c:	2330      	movs	r3, #48	; 0x30
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0x78>)
 8001354:	f000 fb12 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b096      	sub	sp, #88	; 0x58
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2234      	movs	r2, #52	; 0x34
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fa5d 	bl	800389c <memset>
  if(hi2c->Instance==I2C1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_I2C_MspInit+0xa8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d137      	bne.n	800145c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f89f 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001404:	f7ff ffb0 	bl	8001368 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_I2C_MspInit+0xac>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_I2C_MspInit+0xac>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_I2C_MspInit+0xac>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001420:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001424:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001432:	2304      	movs	r3, #4
 8001434:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f000 fa9c 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0xac>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_I2C_MspInit+0xac>)
 800144a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144e:	6593      	str	r3, [r2, #88]	; 0x58
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_I2C_MspInit+0xac>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3758      	adds	r7, #88	; 0x58
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40005400 	.word	0x40005400
 8001468:	40021000 	.word	0x40021000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f936 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
  }

  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e009      	b.n	8001520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <_write+0x12>
  }
  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	605a      	str	r2, [r3, #4]
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f002 f93c 	bl	8003848 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000a000 	.word	0x2000a000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200000fc 	.word	0x200000fc
 8001604:	20000118 	.word	0x20000118

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f002 f8fb 	bl	8003854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fd27 	bl	80010b0 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001670:	08004be8 	.word	0x08004be8
  ldr r2, =_sbss
 8001674:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001678:	20000114 	.word	0x20000114

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>

0800167e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f943 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f80e 	bl	80016b0 <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	e001      	b.n	80016a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a0:	f7ff fe68 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_InitTick+0x70>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_InitTick+0x6c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f941 	bl	8001962 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d809      	bhi.n	8001700 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f919 	bl	800192a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_InitTick+0x74>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e007      	b.n	8001710 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e001      	b.n	8001710 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000014 	.word	0x20000014
 8001720:	2000000c 	.word	0x2000000c
 8001724:	20000010 	.word	0x20000010

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000014 	.word	0x20000014
 800174c:	20000100 	.word	0x20000100

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000100 	.word	0x20000100

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000014 	.word	0x20000014

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff47 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff5c 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb0 	bl	80018d0 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e14e      	b.n	8001c2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8140 	beq.w	8001c24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d005      	beq.n	80019bc <HAL_GPIO_Init+0x40>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d130      	bne.n	8001a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 0201 	and.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d017      	beq.n	8001a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d123      	bne.n	8001aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0203 	and.w	r2, r3, #3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 809a 	beq.w	8001c24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6613      	str	r3, [r2, #96]	; 0x60
 8001afc:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1e0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2d4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x2d8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1d8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_GPIO_Init+0x2dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1d4>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e006      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b50:	2307      	movs	r3, #7
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f aea9 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e081      	b.n	8001da6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fb80 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e006      	b.n	8001d18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d104      	bne.n	8001d2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69d9      	ldr	r1, [r3, #28]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	f040 80da 	bne.w	8001f86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0x30>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0d3      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff fcb2 	bl	8001750 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2319      	movs	r3, #25
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fa00 	bl	8002200 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0be      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2221      	movs	r2, #33	; 0x21
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2210      	movs	r2, #16
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	893a      	ldrh	r2, [r7, #8]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2bff      	cmp	r3, #255	; 0xff
 8001e3a:	d90e      	bls.n	8001e5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fbf6 	bl	8002644 <I2C_TransferConfig>
 8001e58:	e06c      	b.n	8001f34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fbe5 	bl	8002644 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e7a:	e05b      	b.n	8001f34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	6a39      	ldr	r1, [r7, #32]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f9fd 	bl	8002280 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e07b      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d034      	beq.n	8001f34 <HAL_I2C_Master_Transmit+0x184>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d130      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f98f 	bl	8002200 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04d      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d90e      	bls.n	8001f14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8979      	ldrh	r1, [r7, #10]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fb99 	bl	8002644 <I2C_TransferConfig>
 8001f12:	e00f      	b.n	8001f34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fb88 	bl	8002644 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d19e      	bne.n	8001e7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f9dc 	bl	8002300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e01a      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	80002000 	.word	0x80002000
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	f040 80db 	bne.w	8002170 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2C_Master_Receive+0x30>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0d4      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fbbe 	bl	8001750 <HAL_GetTick>
 8001fd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2319      	movs	r3, #25
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f90c 	bl	8002200 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0bf      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2222      	movs	r2, #34	; 0x22
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2bff      	cmp	r3, #255	; 0xff
 8002022:	d90e      	bls.n	8002042 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_I2C_Master_Receive+0x1e4>)
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fb02 	bl	8002644 <I2C_TransferConfig>
 8002040:	e06d      	b.n	800211e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	b2da      	uxtb	r2, r3
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_I2C_Master_Receive+0x1e4>)
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 faf1 	bl	8002644 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002062:	e05c      	b.n	800211e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6a39      	ldr	r1, [r7, #32]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f985 	bl	8002378 <I2C_WaitOnRXNEFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e07c      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d034      	beq.n	800211e <HAL_I2C_Master_Receive+0x186>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d130      	bne.n	800211e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2200      	movs	r2, #0
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f89a 	bl	8002200 <I2C_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e04d      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2bff      	cmp	r3, #255	; 0xff
 80020de:	d90e      	bls.n	80020fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 faa4 	bl	8002644 <I2C_TransferConfig>
 80020fc:	e00f      	b.n	800211e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	b2da      	uxtb	r2, r3
 800210e:	8979      	ldrh	r1, [r7, #10]
 8002110:	2300      	movs	r3, #0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fa93 	bl	8002644 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d19d      	bne.n	8002064 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6a39      	ldr	r1, [r7, #32]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8e7 	bl	8002300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e01a      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2220      	movs	r2, #32
 8002142:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_I2C_Master_Receive+0x1e8>)
 8002150:	400b      	ands	r3, r1
 8002152:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	80002400 	.word	0x80002400
 8002180:	fe00e800 	.word	0xfe00e800

08002184 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d103      	bne.n	80021d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	619a      	str	r2, [r3, #24]
  }
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002210:	e022      	b.n	8002258 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d01e      	beq.n	8002258 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff fa99 	bl	8001750 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d113      	bne.n	8002258 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e00f      	b.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	429a      	cmp	r2, r3
 8002274:	d0cd      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800228c:	e02c      	b.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f8ea 	bl	800246c <I2C_IsErrorOccurred>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e02a      	b.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d01e      	beq.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7ff fa51 	bl	8001750 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d113      	bne.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e007      	b.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d1cb      	bne.n	800228e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800230c:	e028      	b.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f8aa 	bl	800246c <I2C_IsErrorOccurred>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e026      	b.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff fa15 	bl	8001750 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d113      	bne.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b20      	cmp	r3, #32
 800236c:	d1cf      	bne.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002384:	e064      	b.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f86e 	bl	800246c <I2C_IsErrorOccurred>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e062      	b.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d138      	bne.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d105      	bne.n	80023c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e04e      	b.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d107      	bne.n	80023e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2204      	movs	r2, #4
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
 80023de:	e002      	b.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e022      	b.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7ff f999 	bl	8001750 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e007      	b.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d193      	bne.n	8002386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	fe00e800 	.word	0xfe00e800

0800246c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d075      	beq.n	8002584 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2210      	movs	r2, #16
 800249e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024a0:	e056      	b.n	8002550 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d052      	beq.n	8002550 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f951 	bl	8001750 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_IsErrorOccurred+0x54>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d147      	bne.n	8002550 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e2:	d12e      	bne.n	8002542 <I2C_IsErrorOccurred+0xd6>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ea:	d02a      	beq.n	8002542 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d027      	beq.n	8002542 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002502:	f7ff f925 	bl	8001750 <HAL_GetTick>
 8002506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002508:	e01b      	b.n	8002542 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800250a:	f7ff f921 	bl	8001750 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b19      	cmp	r3, #25
 8002516:	d914      	bls.n	8002542 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b20      	cmp	r3, #32
 800254e:	d1dc      	bne.n	800250a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b20      	cmp	r3, #32
 800255c:	d003      	beq.n	8002566 <I2C_IsErrorOccurred+0xfa>
 800255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002562:	2b00      	cmp	r3, #0
 8002564:	d09d      	beq.n	80024a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2220      	movs	r2, #32
 8002574:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01c      	beq.n	8002634 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fddc 	bl	80021b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <I2C_IsErrorOccurred+0x1d4>)
 800260c:	400b      	ands	r3, r1
 800260e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002638:	4618      	mov	r0, r3
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	817b      	strh	r3, [r7, #10]
 8002652:	4613      	mov	r3, r2
 8002654:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800265c:	7a7b      	ldrb	r3, [r7, #9]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002664:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	4313      	orrs	r3, r2
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	0d5b      	lsrs	r3, r3, #21
 800267e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <I2C_TransferConfig+0x60>)
 8002684:	430b      	orrs	r3, r1
 8002686:	43db      	mvns	r3, r3
 8002688:	ea02 0103 	and.w	r1, r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	03ff63ff 	.word	0x03ff63ff

080026a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d138      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e032      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d139      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275e:	2302      	movs	r3, #2
 8002760:	e033      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d130      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d038      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2232      	movs	r2, #50	; 0x32
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	e002      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d102      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d110      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d007      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	2000000c 	.word	0x2000000c
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f000 bc4f 	b.w	8003152 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b97      	ldr	r3, [pc, #604]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028be:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e6 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x4c>
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	f040 808d 	bne.w	80029fe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8089 	bne.w	80029fe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ec:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_RCC_OscConfig+0x66>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f000 bc26 	b.w	8003152 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_RCC_OscConfig+0x80>
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291e:	e005      	b.n	800292c <HAL_RCC_OscConfig+0x8c>
 8002920:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	4293      	cmp	r3, r2
 800292e:	d224      	bcs.n	800297a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fda1 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f000 bc06 	b.w	8003152 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a72      	ldr	r2, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	496d      	ldr	r1, [pc, #436]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002964:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	4968      	ldr	r1, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e025      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297a:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a65      	ldr	r2, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	4960      	ldr	r1, [pc, #384]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002998:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	495b      	ldr	r1, [pc, #364]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd60 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e3c5      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c6:	f000 fccd 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b51      	ldr	r3, [pc, #324]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4950      	ldr	r1, [pc, #320]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fe60 	bl	80016b0 <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d052      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	e3a9      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d032      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fe9d 	bl	8001750 <HAL_GetTick>
 8002a16:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fe99 	bl	8001750 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e392      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	4930      	ldr	r1, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	492b      	ldr	r1, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e01a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fe6a 	bl	8001750 <HAL_GetTick>
 8002a7c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a80:	f7fe fe66 	bl	8001750 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e35f      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1e0>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d073      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x220>
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d063      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2f4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d15f      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e33c      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x250>
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e025      	b.n	8002b3c <HAL_RCC_OscConfig+0x29c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d114      	bne.n	8002b24 <HAL_RCC_OscConfig+0x284>
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a02      	ldr	r2, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e013      	b.n	8002b3c <HAL_RCC_OscConfig+0x29c>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08004b08 	.word	0x08004b08
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	20000010 	.word	0x20000010
 8002b24:	4b8f      	ldr	r3, [pc, #572]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a8e      	ldr	r2, [pc, #568]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8b      	ldr	r2, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fe04 	bl	8001750 <HAL_GetTick>
 8002b48:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fe00 	bl	8001750 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e2f9      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2ac>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fdf0 	bl	8001750 <HAL_GetTick>
 8002b70:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fdec 	bl	8001750 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e2e5      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2d4>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d060      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x314>
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d119      	bne.n	8002be2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d116      	bne.n	8002be2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x32c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e2c2      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	4962      	ldr	r1, [pc, #392]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	e040      	b.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fdab 	bl	8001750 <HAL_GetTick>
 8002bfa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fda7 	bl	8001750 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e2a0      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	494e      	ldr	r1, [pc, #312]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd87 	bl	8001750 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe fd83 	bl	8001750 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e27c      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8082 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d05f      	beq.n	8002d3a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d037      	beq.n	8002d00 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e254      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01b      	beq.n	8002cea <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc2:	f7fe fd45 	bl	8001750 <HAL_GetTick>
 8002cc6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe fd41 	bl	8001750 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b11      	cmp	r3, #17
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e23a      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ef      	bne.n	8002cca <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf0:	f023 0210 	bic.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	491a      	ldr	r1, [pc, #104]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fd1e 	bl	8001750 <HAL_GetTick>
 8002d14:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fd1a 	bl	8001750 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b11      	cmp	r3, #17
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e213      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCC_OscConfig+0x478>
 8002d38:	e01d      	b.n	8002d76 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fd01 	bl	8001750 <HAL_GetTick>
 8002d4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fcfd 	bl	8001750 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b11      	cmp	r3, #17
 8002d5e:	d903      	bls.n	8002d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1f6      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
 8002d64:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d68:	4ba9      	ldr	r3, [pc, #676]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ed      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80bd 	beq.w	8002efe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8a:	4ba1      	ldr	r3, [pc, #644]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b9e      	ldr	r3, [pc, #632]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	4a9d      	ldr	r2, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6593      	str	r3, [r2, #88]	; 0x58
 8002da2:	4b9b      	ldr	r3, [pc, #620]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	4b97      	ldr	r3, [pc, #604]	; (8003014 <HAL_RCC_OscConfig+0x774>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x774>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a93      	ldr	r2, [pc, #588]	; (8003014 <HAL_RCC_OscConfig+0x774>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fcc0 	bl	8001750 <HAL_GetTick>
 8002dd0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe fcbc 	bl	8001750 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1b5      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x774>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002dfe:	4b84      	ldr	r3, [pc, #528]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	497f      	ldr	r1, [pc, #508]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e24:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a79      	ldr	r2, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e34:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e44:	e018      	b.n	8002e78 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	4a70      	ldr	r2, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e56:	e00f      	b.n	8002e78 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e58:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	4a6c      	ldr	r2, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e68:	4b69      	ldr	r3, [pc, #420]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	4a68      	ldr	r2, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d016      	beq.n	8002eae <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fc66 	bl	8001750 <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fc62 	bl	8001750 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e159      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ed      	beq.n	8002e88 <HAL_RCC_OscConfig+0x5e8>
 8002eac:	e01d      	b.n	8002eea <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe fc4f 	bl	8001750 <HAL_GetTick>
 8002eb2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fc4b 	bl	8001750 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e142      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ed      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002eda:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d03c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	4a3d      	ldr	r2, [pc, #244]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe fc15 	bl	8001750 <HAL_GetTick>
 8002f26:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fc11 	bl	8001750 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e10a      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ef      	beq.n	8002f2a <HAL_RCC_OscConfig+0x68a>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f52:	4a2f      	ldr	r2, [pc, #188]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fbf8 	bl	8001750 <HAL_GetTick>
 8002f60:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f64:	f7fe fbf4 	bl	8001750 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0ed      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ef      	bne.n	8002f64 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80e1 	beq.w	8003150 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	f040 80b5 	bne.w	8003102 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d124      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11b      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d113      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d05f      	beq.n	80030b6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d05a      	beq.n	80030b2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a03      	ldr	r2, [pc, #12]	; (8003010 <HAL_RCC_OscConfig+0x770>)
 8003002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003008:	f7fe fba2 	bl	8001750 <HAL_GetTick>
 800300c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300e:	e00c      	b.n	800302a <HAL_RCC_OscConfig+0x78a>
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fb9a 	bl	8001750 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e093      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x8c0>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003046:	3a01      	subs	r2, #1
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003050:	0212      	lsls	r2, r2, #8
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003058:	0852      	lsrs	r2, r2, #1
 800305a:	3a01      	subs	r2, #1
 800305c:	0552      	lsls	r2, r2, #21
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003064:	0852      	lsrs	r2, r2, #1
 8003066:	3a01      	subs	r2, #1
 8003068:	0652      	lsls	r2, r2, #25
 800306a:	430a      	orrs	r2, r1
 800306c:	493b      	ldr	r1, [pc, #236]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a39      	ldr	r2, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003088:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308a:	f7fe fb61 	bl	8001750 <HAL_GetTick>
 800308e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fb5d 	bl	8001750 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e056      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b0:	e04e      	b.n	8003150 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e04d      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d146      	bne.n	8003150 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a25      	ldr	r2, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030cc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030da:	f7fe fb39 	bl	8001750 <HAL_GetTick>
 80030de:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fb35 	bl	8001750 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e02e      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x842>
 8003100:	e026      	b.n	8003150 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d021      	beq.n	800314c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fb1c 	bl	8001750 <HAL_GetTick>
 8003118:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fb18 	bl	8001750 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e011      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <HAL_RCC_OscConfig+0x8bc>)
 8003140:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003144:	f023 0303 	bic.w	r3, r3, #3
 8003148:	60d3      	str	r3, [r2, #12]
 800314a:	e001      	b.n	8003150 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3728      	adds	r7, #40	; 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	f99f808c 	.word	0xf99f808c

08003164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0e7      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b75      	ldr	r3, [pc, #468]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b72      	ldr	r3, [pc, #456]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4970      	ldr	r1, [pc, #448]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b6e      	ldr	r3, [pc, #440]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cf      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4960      	ldr	r1, [pc, #384]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d04c      	beq.n	800327c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d121      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0a6      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d115      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e09a      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321a:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e08e      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e086      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4943      	ldr	r1, [pc, #268]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fe fa80 	bl	8001750 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe fa7c 	bl	8001750 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e06e      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	492b      	ldr	r1, [pc, #172]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d210      	bcs.n	80032da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 0207 	bic.w	r2, r3, #7
 80032c0:	4923      	ldr	r1, [pc, #140]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e036      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4918      	ldr	r1, [pc, #96]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4910      	ldr	r1, [pc, #64]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003318:	f000 f824 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x1f4>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1f8>)
 8003336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1fc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe f9b7 	bl	80016b0 <HAL_InitTick>
 8003342:	4603      	mov	r3, r0
 8003344:	72fb      	strb	r3, [r7, #11]

  return status;
 8003346:	7afb      	ldrb	r3, [r7, #11]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40022000 	.word	0x40022000
 8003354:	40021000 	.word	0x40021000
 8003358:	08004b08 	.word	0x08004b08
 800335c:	2000000c 	.word	0x2000000c
 8003360:	20000010 	.word	0x20000010

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d121      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d11e      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e004      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d134      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0xa6>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0xac>
 8003408:	e005      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 800340c:	617b      	str	r3, [r7, #20]
      break;
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 8003412:	617b      	str	r3, [r7, #20]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	617b      	str	r3, [r7, #20]
      break;
 800341a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	fb03 f202 	mul.w	r2, r3, r2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	0e5b      	lsrs	r3, r3, #25
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	3301      	adds	r3, #1
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800345c:	69bb      	ldr	r3, [r7, #24]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	08004b18 	.word	0x08004b18
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003494:	f7ff f9a0 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003498:	6178      	str	r0, [r7, #20]
 800349a:	e014      	b.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	4a24      	ldr	r2, [pc, #144]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	; 0x58
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b4:	f7ff f990 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 80034b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d10b      	bne.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d919      	bls.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2ba0      	cmp	r3, #160	; 0xa0
 80034d8:	d902      	bls.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034da:	2302      	movs	r3, #2
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e013      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e010      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d902      	bls.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034ec:	2303      	movs	r3, #3
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	e00a      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d102      	bne.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f8:	2302      	movs	r3, #2
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e004      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b70      	cmp	r3, #112	; 0x70
 8003502:	d101      	bne.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	4909      	ldr	r1, [pc, #36]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	40022000 	.word	0x40022000

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003544:	2300      	movs	r3, #0
 8003546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003548:	2300      	movs	r3, #0
 800354a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 809e 	beq.w	8003696 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800355e:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b40      	ldr	r3, [pc, #256]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a3f      	ldr	r2, [pc, #252]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358c:	2301      	movs	r3, #1
 800358e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800359c:	f7fe f8d8 	bl	8001750 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fe f8d4 	bl	8001750 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	74fb      	strb	r3, [r7, #19]
        break;
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b8:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ef      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d15a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01e      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d019      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035e6:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800360a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe f894 	bl	8001750 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362a:	e00b      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe f890 	bl	8001750 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d902      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	74fb      	strb	r3, [r7, #19]
            break;
 8003642:	e006      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ec      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003684:	7c7b      	ldrb	r3, [r7, #17]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4a6d      	ldr	r2, [pc, #436]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4964      	ldr	r1, [pc, #400]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c4:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 020c 	bic.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	495c      	ldr	r1, [pc, #368]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4953      	ldr	r1, [pc, #332]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003708:	4b4e      	ldr	r3, [pc, #312]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	494b      	ldr	r1, [pc, #300]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4942      	ldr	r1, [pc, #264]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	493a      	ldr	r1, [pc, #232]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800376e:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	4931      	ldr	r1, [pc, #196]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4929      	ldr	r1, [pc, #164]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4920      	ldr	r1, [pc, #128]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d015      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	4918      	ldr	r1, [pc, #96]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f2:	d105      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382a:	d105      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003838:	7cbb      	ldrb	r3, [r7, #18]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <__errno>:
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <__errno+0x8>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000018 	.word	0x20000018

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4d0d      	ldr	r5, [pc, #52]	; (800388c <__libc_init_array+0x38>)
 8003858:	4c0d      	ldr	r4, [pc, #52]	; (8003890 <__libc_init_array+0x3c>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	2600      	movs	r6, #0
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	4d0b      	ldr	r5, [pc, #44]	; (8003894 <__libc_init_array+0x40>)
 8003866:	4c0c      	ldr	r4, [pc, #48]	; (8003898 <__libc_init_array+0x44>)
 8003868:	f001 f824 	bl	80048b4 <_init>
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	2600      	movs	r6, #0
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	f855 3b04 	ldr.w	r3, [r5], #4
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	f855 3b04 	ldr.w	r3, [r5], #4
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	08004be0 	.word	0x08004be0
 8003890:	08004be0 	.word	0x08004be0
 8003894:	08004be0 	.word	0x08004be0
 8003898:	08004be4 	.word	0x08004be4

0800389c <memset>:
 800389c:	4402      	add	r2, r0
 800389e:	4603      	mov	r3, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <iprintf>:
 80038ac:	b40f      	push	{r0, r1, r2, r3}
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <iprintf+0x2c>)
 80038b0:	b513      	push	{r0, r1, r4, lr}
 80038b2:	681c      	ldr	r4, [r3, #0]
 80038b4:	b124      	cbz	r4, 80038c0 <iprintf+0x14>
 80038b6:	69a3      	ldr	r3, [r4, #24]
 80038b8:	b913      	cbnz	r3, 80038c0 <iprintf+0x14>
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 fa5e 	bl	8003d7c <__sinit>
 80038c0:	ab05      	add	r3, sp, #20
 80038c2:	9a04      	ldr	r2, [sp, #16]
 80038c4:	68a1      	ldr	r1, [r4, #8]
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	4620      	mov	r0, r4
 80038ca:	f000 fc67 	bl	800419c <_vfiprintf_r>
 80038ce:	b002      	add	sp, #8
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d4:	b004      	add	sp, #16
 80038d6:	4770      	bx	lr
 80038d8:	20000018 	.word	0x20000018

080038dc <_puts_r>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	460e      	mov	r6, r1
 80038e0:	4605      	mov	r5, r0
 80038e2:	b118      	cbz	r0, 80038ec <_puts_r+0x10>
 80038e4:	6983      	ldr	r3, [r0, #24]
 80038e6:	b90b      	cbnz	r3, 80038ec <_puts_r+0x10>
 80038e8:	f000 fa48 	bl	8003d7c <__sinit>
 80038ec:	69ab      	ldr	r3, [r5, #24]
 80038ee:	68ac      	ldr	r4, [r5, #8]
 80038f0:	b913      	cbnz	r3, 80038f8 <_puts_r+0x1c>
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 fa42 	bl	8003d7c <__sinit>
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <_puts_r+0xd0>)
 80038fa:	429c      	cmp	r4, r3
 80038fc:	d120      	bne.n	8003940 <_puts_r+0x64>
 80038fe:	686c      	ldr	r4, [r5, #4]
 8003900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003902:	07db      	lsls	r3, r3, #31
 8003904:	d405      	bmi.n	8003912 <_puts_r+0x36>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	0598      	lsls	r0, r3, #22
 800390a:	d402      	bmi.n	8003912 <_puts_r+0x36>
 800390c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390e:	f000 fad3 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	0719      	lsls	r1, r3, #28
 8003916:	d51d      	bpl.n	8003954 <_puts_r+0x78>
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	b1db      	cbz	r3, 8003954 <_puts_r+0x78>
 800391c:	3e01      	subs	r6, #1
 800391e:	68a3      	ldr	r3, [r4, #8]
 8003920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003924:	3b01      	subs	r3, #1
 8003926:	60a3      	str	r3, [r4, #8]
 8003928:	bb39      	cbnz	r1, 800397a <_puts_r+0x9e>
 800392a:	2b00      	cmp	r3, #0
 800392c:	da38      	bge.n	80039a0 <_puts_r+0xc4>
 800392e:	4622      	mov	r2, r4
 8003930:	210a      	movs	r1, #10
 8003932:	4628      	mov	r0, r5
 8003934:	f000 f848 	bl	80039c8 <__swbuf_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d011      	beq.n	8003960 <_puts_r+0x84>
 800393c:	250a      	movs	r5, #10
 800393e:	e011      	b.n	8003964 <_puts_r+0x88>
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <_puts_r+0xd4>)
 8003942:	429c      	cmp	r4, r3
 8003944:	d101      	bne.n	800394a <_puts_r+0x6e>
 8003946:	68ac      	ldr	r4, [r5, #8]
 8003948:	e7da      	b.n	8003900 <_puts_r+0x24>
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <_puts_r+0xd8>)
 800394c:	429c      	cmp	r4, r3
 800394e:	bf08      	it	eq
 8003950:	68ec      	ldreq	r4, [r5, #12]
 8003952:	e7d5      	b.n	8003900 <_puts_r+0x24>
 8003954:	4621      	mov	r1, r4
 8003956:	4628      	mov	r0, r5
 8003958:	f000 f888 	bl	8003a6c <__swsetup_r>
 800395c:	2800      	cmp	r0, #0
 800395e:	d0dd      	beq.n	800391c <_puts_r+0x40>
 8003960:	f04f 35ff 	mov.w	r5, #4294967295
 8003964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003966:	07da      	lsls	r2, r3, #31
 8003968:	d405      	bmi.n	8003976 <_puts_r+0x9a>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	d402      	bmi.n	8003976 <_puts_r+0x9a>
 8003970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003972:	f000 faa2 	bl	8003eba <__retarget_lock_release_recursive>
 8003976:	4628      	mov	r0, r5
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	2b00      	cmp	r3, #0
 800397c:	da04      	bge.n	8003988 <_puts_r+0xac>
 800397e:	69a2      	ldr	r2, [r4, #24]
 8003980:	429a      	cmp	r2, r3
 8003982:	dc06      	bgt.n	8003992 <_puts_r+0xb6>
 8003984:	290a      	cmp	r1, #10
 8003986:	d004      	beq.n	8003992 <_puts_r+0xb6>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	6022      	str	r2, [r4, #0]
 800398e:	7019      	strb	r1, [r3, #0]
 8003990:	e7c5      	b.n	800391e <_puts_r+0x42>
 8003992:	4622      	mov	r2, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f817 	bl	80039c8 <__swbuf_r>
 800399a:	3001      	adds	r0, #1
 800399c:	d1bf      	bne.n	800391e <_puts_r+0x42>
 800399e:	e7df      	b.n	8003960 <_puts_r+0x84>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	250a      	movs	r5, #10
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	6022      	str	r2, [r4, #0]
 80039a8:	701d      	strb	r5, [r3, #0]
 80039aa:	e7db      	b.n	8003964 <_puts_r+0x88>
 80039ac:	08004b6c 	.word	0x08004b6c
 80039b0:	08004b8c 	.word	0x08004b8c
 80039b4:	08004b4c 	.word	0x08004b4c

080039b8 <puts>:
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <puts+0xc>)
 80039ba:	4601      	mov	r1, r0
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f7ff bf8d 	b.w	80038dc <_puts_r>
 80039c2:	bf00      	nop
 80039c4:	20000018 	.word	0x20000018

080039c8 <__swbuf_r>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	460e      	mov	r6, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	4605      	mov	r5, r0
 80039d0:	b118      	cbz	r0, 80039da <__swbuf_r+0x12>
 80039d2:	6983      	ldr	r3, [r0, #24]
 80039d4:	b90b      	cbnz	r3, 80039da <__swbuf_r+0x12>
 80039d6:	f000 f9d1 	bl	8003d7c <__sinit>
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <__swbuf_r+0x98>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	d12b      	bne.n	8003a38 <__swbuf_r+0x70>
 80039e0:	686c      	ldr	r4, [r5, #4]
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	071a      	lsls	r2, r3, #28
 80039ea:	d52f      	bpl.n	8003a4c <__swbuf_r+0x84>
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	b36b      	cbz	r3, 8003a4c <__swbuf_r+0x84>
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	1ac0      	subs	r0, r0, r3
 80039f6:	6963      	ldr	r3, [r4, #20]
 80039f8:	b2f6      	uxtb	r6, r6
 80039fa:	4283      	cmp	r3, r0
 80039fc:	4637      	mov	r7, r6
 80039fe:	dc04      	bgt.n	8003a0a <__swbuf_r+0x42>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 f926 	bl	8003c54 <_fflush_r>
 8003a08:	bb30      	cbnz	r0, 8003a58 <__swbuf_r+0x90>
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60a3      	str	r3, [r4, #8]
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	701e      	strb	r6, [r3, #0]
 8003a18:	6963      	ldr	r3, [r4, #20]
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	d004      	beq.n	8003a2a <__swbuf_r+0x62>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	07db      	lsls	r3, r3, #31
 8003a24:	d506      	bpl.n	8003a34 <__swbuf_r+0x6c>
 8003a26:	2e0a      	cmp	r6, #10
 8003a28:	d104      	bne.n	8003a34 <__swbuf_r+0x6c>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f911 	bl	8003c54 <_fflush_r>
 8003a32:	b988      	cbnz	r0, 8003a58 <__swbuf_r+0x90>
 8003a34:	4638      	mov	r0, r7
 8003a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <__swbuf_r+0x9c>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	d101      	bne.n	8003a42 <__swbuf_r+0x7a>
 8003a3e:	68ac      	ldr	r4, [r5, #8]
 8003a40:	e7cf      	b.n	80039e2 <__swbuf_r+0x1a>
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <__swbuf_r+0xa0>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	bf08      	it	eq
 8003a48:	68ec      	ldreq	r4, [r5, #12]
 8003a4a:	e7ca      	b.n	80039e2 <__swbuf_r+0x1a>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f80c 	bl	8003a6c <__swsetup_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d0cb      	beq.n	80039f0 <__swbuf_r+0x28>
 8003a58:	f04f 37ff 	mov.w	r7, #4294967295
 8003a5c:	e7ea      	b.n	8003a34 <__swbuf_r+0x6c>
 8003a5e:	bf00      	nop
 8003a60:	08004b6c 	.word	0x08004b6c
 8003a64:	08004b8c 	.word	0x08004b8c
 8003a68:	08004b4c 	.word	0x08004b4c

08003a6c <__swsetup_r>:
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <__swsetup_r+0xcc>)
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	681d      	ldr	r5, [r3, #0]
 8003a72:	4606      	mov	r6, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	b125      	cbz	r5, 8003a82 <__swsetup_r+0x16>
 8003a78:	69ab      	ldr	r3, [r5, #24]
 8003a7a:	b913      	cbnz	r3, 8003a82 <__swsetup_r+0x16>
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 f97d 	bl	8003d7c <__sinit>
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <__swsetup_r+0xd0>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d10f      	bne.n	8003aa8 <__swsetup_r+0x3c>
 8003a88:	686c      	ldr	r4, [r5, #4]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a90:	0719      	lsls	r1, r3, #28
 8003a92:	d42c      	bmi.n	8003aee <__swsetup_r+0x82>
 8003a94:	06dd      	lsls	r5, r3, #27
 8003a96:	d411      	bmi.n	8003abc <__swsetup_r+0x50>
 8003a98:	2309      	movs	r3, #9
 8003a9a:	6033      	str	r3, [r6, #0]
 8003a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa6:	e03e      	b.n	8003b26 <__swsetup_r+0xba>
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <__swsetup_r+0xd4>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d101      	bne.n	8003ab2 <__swsetup_r+0x46>
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	e7eb      	b.n	8003a8a <__swsetup_r+0x1e>
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <__swsetup_r+0xd8>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	bf08      	it	eq
 8003ab8:	68ec      	ldreq	r4, [r5, #12]
 8003aba:	e7e6      	b.n	8003a8a <__swsetup_r+0x1e>
 8003abc:	0758      	lsls	r0, r3, #29
 8003abe:	d512      	bpl.n	8003ae6 <__swsetup_r+0x7a>
 8003ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac2:	b141      	cbz	r1, 8003ad6 <__swsetup_r+0x6a>
 8003ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	d002      	beq.n	8003ad2 <__swsetup_r+0x66>
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 fa5b 	bl	8003f88 <_free_r>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b94b      	cbnz	r3, 8003b06 <__swsetup_r+0x9a>
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d003      	beq.n	8003b06 <__swsetup_r+0x9a>
 8003afe:	4621      	mov	r1, r4
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 fa01 	bl	8003f08 <__smakebuf_r>
 8003b06:	89a0      	ldrh	r0, [r4, #12]
 8003b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b0c:	f010 0301 	ands.w	r3, r0, #1
 8003b10:	d00a      	beq.n	8003b28 <__swsetup_r+0xbc>
 8003b12:	2300      	movs	r3, #0
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	6963      	ldr	r3, [r4, #20]
 8003b18:	425b      	negs	r3, r3
 8003b1a:	61a3      	str	r3, [r4, #24]
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	b943      	cbnz	r3, 8003b32 <__swsetup_r+0xc6>
 8003b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b24:	d1ba      	bne.n	8003a9c <__swsetup_r+0x30>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	0781      	lsls	r1, r0, #30
 8003b2a:	bf58      	it	pl
 8003b2c:	6963      	ldrpl	r3, [r4, #20]
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	e7f4      	b.n	8003b1c <__swsetup_r+0xb0>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e7f7      	b.n	8003b26 <__swsetup_r+0xba>
 8003b36:	bf00      	nop
 8003b38:	20000018 	.word	0x20000018
 8003b3c:	08004b6c 	.word	0x08004b6c
 8003b40:	08004b8c 	.word	0x08004b8c
 8003b44:	08004b4c 	.word	0x08004b4c

08003b48 <__sflush_r>:
 8003b48:	898a      	ldrh	r2, [r1, #12]
 8003b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4e:	4605      	mov	r5, r0
 8003b50:	0710      	lsls	r0, r2, #28
 8003b52:	460c      	mov	r4, r1
 8003b54:	d458      	bmi.n	8003c08 <__sflush_r+0xc0>
 8003b56:	684b      	ldr	r3, [r1, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dc05      	bgt.n	8003b68 <__sflush_r+0x20>
 8003b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	dc02      	bgt.n	8003b68 <__sflush_r+0x20>
 8003b62:	2000      	movs	r0, #0
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b6a:	2e00      	cmp	r6, #0
 8003b6c:	d0f9      	beq.n	8003b62 <__sflush_r+0x1a>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b74:	682f      	ldr	r7, [r5, #0]
 8003b76:	602b      	str	r3, [r5, #0]
 8003b78:	d032      	beq.n	8003be0 <__sflush_r+0x98>
 8003b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	075a      	lsls	r2, r3, #29
 8003b80:	d505      	bpl.n	8003b8e <__sflush_r+0x46>
 8003b82:	6863      	ldr	r3, [r4, #4]
 8003b84:	1ac0      	subs	r0, r0, r3
 8003b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b88:	b10b      	cbz	r3, 8003b8e <__sflush_r+0x46>
 8003b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b8c:	1ac0      	subs	r0, r0, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	4602      	mov	r2, r0
 8003b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b94:	6a21      	ldr	r1, [r4, #32]
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b0      	blx	r6
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	d106      	bne.n	8003bae <__sflush_r+0x66>
 8003ba0:	6829      	ldr	r1, [r5, #0]
 8003ba2:	291d      	cmp	r1, #29
 8003ba4:	d82c      	bhi.n	8003c00 <__sflush_r+0xb8>
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <__sflush_r+0x108>)
 8003ba8:	40ca      	lsrs	r2, r1
 8003baa:	07d6      	lsls	r6, r2, #31
 8003bac:	d528      	bpl.n	8003c00 <__sflush_r+0xb8>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	6062      	str	r2, [r4, #4]
 8003bb2:	04d9      	lsls	r1, r3, #19
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	d504      	bpl.n	8003bc4 <__sflush_r+0x7c>
 8003bba:	1c42      	adds	r2, r0, #1
 8003bbc:	d101      	bne.n	8003bc2 <__sflush_r+0x7a>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	b903      	cbnz	r3, 8003bc4 <__sflush_r+0x7c>
 8003bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	602f      	str	r7, [r5, #0]
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d0ca      	beq.n	8003b62 <__sflush_r+0x1a>
 8003bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d002      	beq.n	8003bda <__sflush_r+0x92>
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f9d7 	bl	8003f88 <_free_r>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8003bde:	e7c1      	b.n	8003b64 <__sflush_r+0x1c>
 8003be0:	6a21      	ldr	r1, [r4, #32]
 8003be2:	2301      	movs	r3, #1
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b0      	blx	r6
 8003be8:	1c41      	adds	r1, r0, #1
 8003bea:	d1c7      	bne.n	8003b7c <__sflush_r+0x34>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c4      	beq.n	8003b7c <__sflush_r+0x34>
 8003bf2:	2b1d      	cmp	r3, #29
 8003bf4:	d001      	beq.n	8003bfa <__sflush_r+0xb2>
 8003bf6:	2b16      	cmp	r3, #22
 8003bf8:	d101      	bne.n	8003bfe <__sflush_r+0xb6>
 8003bfa:	602f      	str	r7, [r5, #0]
 8003bfc:	e7b1      	b.n	8003b62 <__sflush_r+0x1a>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	e7ad      	b.n	8003b64 <__sflush_r+0x1c>
 8003c08:	690f      	ldr	r7, [r1, #16]
 8003c0a:	2f00      	cmp	r7, #0
 8003c0c:	d0a9      	beq.n	8003b62 <__sflush_r+0x1a>
 8003c0e:	0793      	lsls	r3, r2, #30
 8003c10:	680e      	ldr	r6, [r1, #0]
 8003c12:	bf08      	it	eq
 8003c14:	694b      	ldreq	r3, [r1, #20]
 8003c16:	600f      	str	r7, [r1, #0]
 8003c18:	bf18      	it	ne
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	eba6 0807 	sub.w	r8, r6, r7
 8003c20:	608b      	str	r3, [r1, #8]
 8003c22:	f1b8 0f00 	cmp.w	r8, #0
 8003c26:	dd9c      	ble.n	8003b62 <__sflush_r+0x1a>
 8003c28:	6a21      	ldr	r1, [r4, #32]
 8003c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	463a      	mov	r2, r7
 8003c30:	4628      	mov	r0, r5
 8003c32:	47b0      	blx	r6
 8003c34:	2800      	cmp	r0, #0
 8003c36:	dc06      	bgt.n	8003c46 <__sflush_r+0xfe>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e78e      	b.n	8003b64 <__sflush_r+0x1c>
 8003c46:	4407      	add	r7, r0
 8003c48:	eba8 0800 	sub.w	r8, r8, r0
 8003c4c:	e7e9      	b.n	8003c22 <__sflush_r+0xda>
 8003c4e:	bf00      	nop
 8003c50:	20400001 	.word	0x20400001

08003c54 <_fflush_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	b913      	cbnz	r3, 8003c64 <_fflush_r+0x10>
 8003c5e:	2500      	movs	r5, #0
 8003c60:	4628      	mov	r0, r5
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	b118      	cbz	r0, 8003c6e <_fflush_r+0x1a>
 8003c66:	6983      	ldr	r3, [r0, #24]
 8003c68:	b90b      	cbnz	r3, 8003c6e <_fflush_r+0x1a>
 8003c6a:	f000 f887 	bl	8003d7c <__sinit>
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <_fflush_r+0x6c>)
 8003c70:	429c      	cmp	r4, r3
 8003c72:	d11b      	bne.n	8003cac <_fflush_r+0x58>
 8003c74:	686c      	ldr	r4, [r5, #4]
 8003c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ef      	beq.n	8003c5e <_fflush_r+0xa>
 8003c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c80:	07d0      	lsls	r0, r2, #31
 8003c82:	d404      	bmi.n	8003c8e <_fflush_r+0x3a>
 8003c84:	0599      	lsls	r1, r3, #22
 8003c86:	d402      	bmi.n	8003c8e <_fflush_r+0x3a>
 8003c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8a:	f000 f915 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003c8e:	4628      	mov	r0, r5
 8003c90:	4621      	mov	r1, r4
 8003c92:	f7ff ff59 	bl	8003b48 <__sflush_r>
 8003c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c98:	07da      	lsls	r2, r3, #31
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	d4e0      	bmi.n	8003c60 <_fflush_r+0xc>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	d4dd      	bmi.n	8003c60 <_fflush_r+0xc>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca6:	f000 f908 	bl	8003eba <__retarget_lock_release_recursive>
 8003caa:	e7d9      	b.n	8003c60 <_fflush_r+0xc>
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_fflush_r+0x70>)
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d101      	bne.n	8003cb6 <_fflush_r+0x62>
 8003cb2:	68ac      	ldr	r4, [r5, #8]
 8003cb4:	e7df      	b.n	8003c76 <_fflush_r+0x22>
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <_fflush_r+0x74>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	bf08      	it	eq
 8003cbc:	68ec      	ldreq	r4, [r5, #12]
 8003cbe:	e7da      	b.n	8003c76 <_fflush_r+0x22>
 8003cc0:	08004b6c 	.word	0x08004b6c
 8003cc4:	08004b8c 	.word	0x08004b8c
 8003cc8:	08004b4c 	.word	0x08004b4c

08003ccc <std>:
 8003ccc:	2300      	movs	r3, #0
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8003cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cda:	6083      	str	r3, [r0, #8]
 8003cdc:	8181      	strh	r1, [r0, #12]
 8003cde:	6643      	str	r3, [r0, #100]	; 0x64
 8003ce0:	81c2      	strh	r2, [r0, #14]
 8003ce2:	6183      	str	r3, [r0, #24]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	305c      	adds	r0, #92	; 0x5c
 8003cea:	f7ff fdd7 	bl	800389c <memset>
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <std+0x38>)
 8003cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <std+0x3c>)
 8003cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <std+0x40>)
 8003cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <std+0x44>)
 8003cfc:	6224      	str	r4, [r4, #32]
 8003cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	bf00      	nop
 8003d04:	08004745 	.word	0x08004745
 8003d08:	08004767 	.word	0x08004767
 8003d0c:	0800479f 	.word	0x0800479f
 8003d10:	080047c3 	.word	0x080047c3

08003d14 <_cleanup_r>:
 8003d14:	4901      	ldr	r1, [pc, #4]	; (8003d1c <_cleanup_r+0x8>)
 8003d16:	f000 b8af 	b.w	8003e78 <_fwalk_reent>
 8003d1a:	bf00      	nop
 8003d1c:	08003c55 	.word	0x08003c55

08003d20 <__sfmoreglue>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	2268      	movs	r2, #104	; 0x68
 8003d24:	1e4d      	subs	r5, r1, #1
 8003d26:	4355      	muls	r5, r2
 8003d28:	460e      	mov	r6, r1
 8003d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d2e:	f000 f997 	bl	8004060 <_malloc_r>
 8003d32:	4604      	mov	r4, r0
 8003d34:	b140      	cbz	r0, 8003d48 <__sfmoreglue+0x28>
 8003d36:	2100      	movs	r1, #0
 8003d38:	e9c0 1600 	strd	r1, r6, [r0]
 8003d3c:	300c      	adds	r0, #12
 8003d3e:	60a0      	str	r0, [r4, #8]
 8003d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d44:	f7ff fdaa 	bl	800389c <memset>
 8003d48:	4620      	mov	r0, r4
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}

08003d4c <__sfp_lock_acquire>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__sfp_lock_acquire+0x8>)
 8003d4e:	f000 b8b3 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	20000105 	.word	0x20000105

08003d58 <__sfp_lock_release>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__sfp_lock_release+0x8>)
 8003d5a:	f000 b8ae 	b.w	8003eba <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	20000105 	.word	0x20000105

08003d64 <__sinit_lock_acquire>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__sinit_lock_acquire+0x8>)
 8003d66:	f000 b8a7 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000106 	.word	0x20000106

08003d70 <__sinit_lock_release>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__sinit_lock_release+0x8>)
 8003d72:	f000 b8a2 	b.w	8003eba <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000106 	.word	0x20000106

08003d7c <__sinit>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4604      	mov	r4, r0
 8003d80:	f7ff fff0 	bl	8003d64 <__sinit_lock_acquire>
 8003d84:	69a3      	ldr	r3, [r4, #24]
 8003d86:	b11b      	cbz	r3, 8003d90 <__sinit+0x14>
 8003d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8c:	f7ff bff0 	b.w	8003d70 <__sinit_lock_release>
 8003d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d94:	6523      	str	r3, [r4, #80]	; 0x50
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <__sinit+0x68>)
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <__sinit+0x6c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	bf04      	itt	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	61a3      	streq	r3, [r4, #24]
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 f820 	bl	8003dec <__sfp>
 8003dac:	6060      	str	r0, [r4, #4]
 8003dae:	4620      	mov	r0, r4
 8003db0:	f000 f81c 	bl	8003dec <__sfp>
 8003db4:	60a0      	str	r0, [r4, #8]
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 f818 	bl	8003dec <__sfp>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60e0      	str	r0, [r4, #12]
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	6860      	ldr	r0, [r4, #4]
 8003dc4:	f7ff ff82 	bl	8003ccc <std>
 8003dc8:	68a0      	ldr	r0, [r4, #8]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	2109      	movs	r1, #9
 8003dce:	f7ff ff7d 	bl	8003ccc <std>
 8003dd2:	68e0      	ldr	r0, [r4, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	2112      	movs	r1, #18
 8003dd8:	f7ff ff78 	bl	8003ccc <std>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	61a3      	str	r3, [r4, #24]
 8003de0:	e7d2      	b.n	8003d88 <__sinit+0xc>
 8003de2:	bf00      	nop
 8003de4:	08004b48 	.word	0x08004b48
 8003de8:	08003d15 	.word	0x08003d15

08003dec <__sfp>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	4607      	mov	r7, r0
 8003df0:	f7ff ffac 	bl	8003d4c <__sfp_lock_acquire>
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <__sfp+0x84>)
 8003df6:	681e      	ldr	r6, [r3, #0]
 8003df8:	69b3      	ldr	r3, [r6, #24]
 8003dfa:	b913      	cbnz	r3, 8003e02 <__sfp+0x16>
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f7ff ffbd 	bl	8003d7c <__sinit>
 8003e02:	3648      	adds	r6, #72	; 0x48
 8003e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	d503      	bpl.n	8003e14 <__sfp+0x28>
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	b30b      	cbz	r3, 8003e54 <__sfp+0x68>
 8003e10:	6836      	ldr	r6, [r6, #0]
 8003e12:	e7f7      	b.n	8003e04 <__sfp+0x18>
 8003e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e18:	b9d5      	cbnz	r5, 8003e50 <__sfp+0x64>
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <__sfp+0x88>)
 8003e1c:	60e3      	str	r3, [r4, #12]
 8003e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e22:	6665      	str	r5, [r4, #100]	; 0x64
 8003e24:	f000 f847 	bl	8003eb6 <__retarget_lock_init_recursive>
 8003e28:	f7ff ff96 	bl	8003d58 <__sfp_lock_release>
 8003e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e34:	6025      	str	r5, [r4, #0]
 8003e36:	61a5      	str	r5, [r4, #24]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e40:	f7ff fd2c 	bl	800389c <memset>
 8003e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	3468      	adds	r4, #104	; 0x68
 8003e52:	e7d9      	b.n	8003e08 <__sfp+0x1c>
 8003e54:	2104      	movs	r1, #4
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7ff ff62 	bl	8003d20 <__sfmoreglue>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	6030      	str	r0, [r6, #0]
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d1d5      	bne.n	8003e10 <__sfp+0x24>
 8003e64:	f7ff ff78 	bl	8003d58 <__sfp_lock_release>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	e7ee      	b.n	8003e4c <__sfp+0x60>
 8003e6e:	bf00      	nop
 8003e70:	08004b48 	.word	0x08004b48
 8003e74:	ffff0001 	.word	0xffff0001

08003e78 <_fwalk_reent>:
 8003e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e84:	2700      	movs	r7, #0
 8003e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8003e8e:	d505      	bpl.n	8003e9c <_fwalk_reent+0x24>
 8003e90:	6824      	ldr	r4, [r4, #0]
 8003e92:	2c00      	cmp	r4, #0
 8003e94:	d1f7      	bne.n	8003e86 <_fwalk_reent+0xe>
 8003e96:	4638      	mov	r0, r7
 8003e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9c:	89ab      	ldrh	r3, [r5, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d907      	bls.n	8003eb2 <_fwalk_reent+0x3a>
 8003ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	d003      	beq.n	8003eb2 <_fwalk_reent+0x3a>
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4630      	mov	r0, r6
 8003eae:	47c0      	blx	r8
 8003eb0:	4307      	orrs	r7, r0
 8003eb2:	3568      	adds	r5, #104	; 0x68
 8003eb4:	e7e9      	b.n	8003e8a <_fwalk_reent+0x12>

08003eb6 <__retarget_lock_init_recursive>:
 8003eb6:	4770      	bx	lr

08003eb8 <__retarget_lock_acquire_recursive>:
 8003eb8:	4770      	bx	lr

08003eba <__retarget_lock_release_recursive>:
 8003eba:	4770      	bx	lr

08003ebc <__swhatbuf_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	460e      	mov	r6, r1
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	b096      	sub	sp, #88	; 0x58
 8003ec8:	4614      	mov	r4, r2
 8003eca:	461d      	mov	r5, r3
 8003ecc:	da08      	bge.n	8003ee0 <__swhatbuf_r+0x24>
 8003ece:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	061a      	lsls	r2, r3, #24
 8003ed8:	d410      	bmi.n	8003efc <__swhatbuf_r+0x40>
 8003eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ede:	e00e      	b.n	8003efe <__swhatbuf_r+0x42>
 8003ee0:	466a      	mov	r2, sp
 8003ee2:	f000 fc95 	bl	8004810 <_fstat_r>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	dbf1      	blt.n	8003ece <__swhatbuf_r+0x12>
 8003eea:	9a01      	ldr	r2, [sp, #4]
 8003eec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ef4:	425a      	negs	r2, r3
 8003ef6:	415a      	adcs	r2, r3
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	e7ee      	b.n	8003eda <__swhatbuf_r+0x1e>
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	2000      	movs	r0, #0
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	b016      	add	sp, #88	; 0x58
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f08 <__smakebuf_r>:
 8003f08:	898b      	ldrh	r3, [r1, #12]
 8003f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f0c:	079d      	lsls	r5, r3, #30
 8003f0e:	4606      	mov	r6, r0
 8003f10:	460c      	mov	r4, r1
 8003f12:	d507      	bpl.n	8003f24 <__smakebuf_r+0x1c>
 8003f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	6163      	str	r3, [r4, #20]
 8003f20:	b002      	add	sp, #8
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	ab01      	add	r3, sp, #4
 8003f26:	466a      	mov	r2, sp
 8003f28:	f7ff ffc8 	bl	8003ebc <__swhatbuf_r>
 8003f2c:	9900      	ldr	r1, [sp, #0]
 8003f2e:	4605      	mov	r5, r0
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 f895 	bl	8004060 <_malloc_r>
 8003f36:	b948      	cbnz	r0, 8003f4c <__smakebuf_r+0x44>
 8003f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f3c:	059a      	lsls	r2, r3, #22
 8003f3e:	d4ef      	bmi.n	8003f20 <__smakebuf_r+0x18>
 8003f40:	f023 0303 	bic.w	r3, r3, #3
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	e7e3      	b.n	8003f14 <__smakebuf_r+0xc>
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <__smakebuf_r+0x7c>)
 8003f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	9b00      	ldr	r3, [sp, #0]
 8003f5c:	6163      	str	r3, [r4, #20]
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	6120      	str	r0, [r4, #16]
 8003f62:	b15b      	cbz	r3, 8003f7c <__smakebuf_r+0x74>
 8003f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 fc63 	bl	8004834 <_isatty_r>
 8003f6e:	b128      	cbz	r0, 8003f7c <__smakebuf_r+0x74>
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	89a0      	ldrh	r0, [r4, #12]
 8003f7e:	4305      	orrs	r5, r0
 8003f80:	81a5      	strh	r5, [r4, #12]
 8003f82:	e7cd      	b.n	8003f20 <__smakebuf_r+0x18>
 8003f84:	08003d15 	.word	0x08003d15

08003f88 <_free_r>:
 8003f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d044      	beq.n	8004018 <_free_r+0x90>
 8003f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f92:	9001      	str	r0, [sp, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f1a1 0404 	sub.w	r4, r1, #4
 8003f9a:	bfb8      	it	lt
 8003f9c:	18e4      	addlt	r4, r4, r3
 8003f9e:	f000 fc6b 	bl	8004878 <__malloc_lock>
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <_free_r+0x94>)
 8003fa4:	9801      	ldr	r0, [sp, #4]
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	b933      	cbnz	r3, 8003fb8 <_free_r+0x30>
 8003faa:	6063      	str	r3, [r4, #4]
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	b003      	add	sp, #12
 8003fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fb4:	f000 bc66 	b.w	8004884 <__malloc_unlock>
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	d908      	bls.n	8003fce <_free_r+0x46>
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	1961      	adds	r1, r4, r5
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	bf01      	itttt	eq
 8003fc4:	6819      	ldreq	r1, [r3, #0]
 8003fc6:	685b      	ldreq	r3, [r3, #4]
 8003fc8:	1949      	addeq	r1, r1, r5
 8003fca:	6021      	streq	r1, [r4, #0]
 8003fcc:	e7ed      	b.n	8003faa <_free_r+0x22>
 8003fce:	461a      	mov	r2, r3
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b10b      	cbz	r3, 8003fd8 <_free_r+0x50>
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	d9fa      	bls.n	8003fce <_free_r+0x46>
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	1855      	adds	r5, r2, r1
 8003fdc:	42a5      	cmp	r5, r4
 8003fde:	d10b      	bne.n	8003ff8 <_free_r+0x70>
 8003fe0:	6824      	ldr	r4, [r4, #0]
 8003fe2:	4421      	add	r1, r4
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	d1e0      	bne.n	8003fae <_free_r+0x26>
 8003fec:	681c      	ldr	r4, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6053      	str	r3, [r2, #4]
 8003ff2:	4421      	add	r1, r4
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	e7da      	b.n	8003fae <_free_r+0x26>
 8003ff8:	d902      	bls.n	8004000 <_free_r+0x78>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6003      	str	r3, [r0, #0]
 8003ffe:	e7d6      	b.n	8003fae <_free_r+0x26>
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	1961      	adds	r1, r4, r5
 8004004:	428b      	cmp	r3, r1
 8004006:	bf04      	itt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	bf04      	itt	eq
 8004010:	1949      	addeq	r1, r1, r5
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	6054      	str	r4, [r2, #4]
 8004016:	e7ca      	b.n	8003fae <_free_r+0x26>
 8004018:	b003      	add	sp, #12
 800401a:	bd30      	pop	{r4, r5, pc}
 800401c:	20000108 	.word	0x20000108

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0e      	ldr	r6, [pc, #56]	; (800405c <sbrk_aligned+0x3c>)
 8004024:	460c      	mov	r4, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	4605      	mov	r5, r0
 800402a:	b911      	cbnz	r1, 8004032 <sbrk_aligned+0x12>
 800402c:	f000 fb7a 	bl	8004724 <_sbrk_r>
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 fb75 	bl	8004724 <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d00a      	beq.n	8004054 <sbrk_aligned+0x34>
 800403e:	1cc4      	adds	r4, r0, #3
 8004040:	f024 0403 	bic.w	r4, r4, #3
 8004044:	42a0      	cmp	r0, r4
 8004046:	d007      	beq.n	8004058 <sbrk_aligned+0x38>
 8004048:	1a21      	subs	r1, r4, r0
 800404a:	4628      	mov	r0, r5
 800404c:	f000 fb6a 	bl	8004724 <_sbrk_r>
 8004050:	3001      	adds	r0, #1
 8004052:	d101      	bne.n	8004058 <sbrk_aligned+0x38>
 8004054:	f04f 34ff 	mov.w	r4, #4294967295
 8004058:	4620      	mov	r0, r4
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	2000010c 	.word	0x2000010c

08004060 <_malloc_r>:
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	1ccd      	adds	r5, r1, #3
 8004066:	f025 0503 	bic.w	r5, r5, #3
 800406a:	3508      	adds	r5, #8
 800406c:	2d0c      	cmp	r5, #12
 800406e:	bf38      	it	cc
 8004070:	250c      	movcc	r5, #12
 8004072:	2d00      	cmp	r5, #0
 8004074:	4607      	mov	r7, r0
 8004076:	db01      	blt.n	800407c <_malloc_r+0x1c>
 8004078:	42a9      	cmp	r1, r5
 800407a:	d905      	bls.n	8004088 <_malloc_r+0x28>
 800407c:	230c      	movs	r3, #12
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	2600      	movs	r6, #0
 8004082:	4630      	mov	r0, r6
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	4e2e      	ldr	r6, [pc, #184]	; (8004144 <_malloc_r+0xe4>)
 800408a:	f000 fbf5 	bl	8004878 <__malloc_lock>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	461c      	mov	r4, r3
 8004092:	bb34      	cbnz	r4, 80040e2 <_malloc_r+0x82>
 8004094:	4629      	mov	r1, r5
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ffc2 	bl	8004020 <sbrk_aligned>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	4604      	mov	r4, r0
 80040a0:	d14d      	bne.n	800413e <_malloc_r+0xde>
 80040a2:	6834      	ldr	r4, [r6, #0]
 80040a4:	4626      	mov	r6, r4
 80040a6:	2e00      	cmp	r6, #0
 80040a8:	d140      	bne.n	800412c <_malloc_r+0xcc>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4631      	mov	r1, r6
 80040ae:	4638      	mov	r0, r7
 80040b0:	eb04 0803 	add.w	r8, r4, r3
 80040b4:	f000 fb36 	bl	8004724 <_sbrk_r>
 80040b8:	4580      	cmp	r8, r0
 80040ba:	d13a      	bne.n	8004132 <_malloc_r+0xd2>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	3503      	adds	r5, #3
 80040c0:	1a6d      	subs	r5, r5, r1
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	4629      	mov	r1, r5
 80040d0:	4638      	mov	r0, r7
 80040d2:	f7ff ffa5 	bl	8004020 <sbrk_aligned>
 80040d6:	3001      	adds	r0, #1
 80040d8:	d02b      	beq.n	8004132 <_malloc_r+0xd2>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	442b      	add	r3, r5
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	e00e      	b.n	8004100 <_malloc_r+0xa0>
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	1b52      	subs	r2, r2, r5
 80040e6:	d41e      	bmi.n	8004126 <_malloc_r+0xc6>
 80040e8:	2a0b      	cmp	r2, #11
 80040ea:	d916      	bls.n	800411a <_malloc_r+0xba>
 80040ec:	1961      	adds	r1, r4, r5
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	6025      	str	r5, [r4, #0]
 80040f2:	bf18      	it	ne
 80040f4:	6059      	strne	r1, [r3, #4]
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	bf08      	it	eq
 80040fa:	6031      	streq	r1, [r6, #0]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4638      	mov	r0, r7
 8004102:	f104 060b 	add.w	r6, r4, #11
 8004106:	f000 fbbd 	bl	8004884 <__malloc_unlock>
 800410a:	f026 0607 	bic.w	r6, r6, #7
 800410e:	1d23      	adds	r3, r4, #4
 8004110:	1af2      	subs	r2, r6, r3
 8004112:	d0b6      	beq.n	8004082 <_malloc_r+0x22>
 8004114:	1b9b      	subs	r3, r3, r6
 8004116:	50a3      	str	r3, [r4, r2]
 8004118:	e7b3      	b.n	8004082 <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	6032      	streq	r2, [r6, #0]
 8004122:	605a      	strne	r2, [r3, #4]
 8004124:	e7ec      	b.n	8004100 <_malloc_r+0xa0>
 8004126:	4623      	mov	r3, r4
 8004128:	6864      	ldr	r4, [r4, #4]
 800412a:	e7b2      	b.n	8004092 <_malloc_r+0x32>
 800412c:	4634      	mov	r4, r6
 800412e:	6876      	ldr	r6, [r6, #4]
 8004130:	e7b9      	b.n	80040a6 <_malloc_r+0x46>
 8004132:	230c      	movs	r3, #12
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4638      	mov	r0, r7
 8004138:	f000 fba4 	bl	8004884 <__malloc_unlock>
 800413c:	e7a1      	b.n	8004082 <_malloc_r+0x22>
 800413e:	6025      	str	r5, [r4, #0]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa0>
 8004142:	bf00      	nop
 8004144:	20000108 	.word	0x20000108

08004148 <__sfputc_r>:
 8004148:	6893      	ldr	r3, [r2, #8]
 800414a:	3b01      	subs	r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	b410      	push	{r4}
 8004150:	6093      	str	r3, [r2, #8]
 8004152:	da08      	bge.n	8004166 <__sfputc_r+0x1e>
 8004154:	6994      	ldr	r4, [r2, #24]
 8004156:	42a3      	cmp	r3, r4
 8004158:	db01      	blt.n	800415e <__sfputc_r+0x16>
 800415a:	290a      	cmp	r1, #10
 800415c:	d103      	bne.n	8004166 <__sfputc_r+0x1e>
 800415e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004162:	f7ff bc31 	b.w	80039c8 <__swbuf_r>
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	1c58      	adds	r0, r3, #1
 800416a:	6010      	str	r0, [r2, #0]
 800416c:	7019      	strb	r1, [r3, #0]
 800416e:	4608      	mov	r0, r1
 8004170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004174:	4770      	bx	lr

08004176 <__sfputs_r>:
 8004176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	4614      	mov	r4, r2
 800417e:	18d5      	adds	r5, r2, r3
 8004180:	42ac      	cmp	r4, r5
 8004182:	d101      	bne.n	8004188 <__sfputs_r+0x12>
 8004184:	2000      	movs	r0, #0
 8004186:	e007      	b.n	8004198 <__sfputs_r+0x22>
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	463a      	mov	r2, r7
 800418e:	4630      	mov	r0, r6
 8004190:	f7ff ffda 	bl	8004148 <__sfputc_r>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d1f3      	bne.n	8004180 <__sfputs_r+0xa>
 8004198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800419c <_vfiprintf_r>:
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	460d      	mov	r5, r1
 80041a2:	b09d      	sub	sp, #116	; 0x74
 80041a4:	4614      	mov	r4, r2
 80041a6:	4698      	mov	r8, r3
 80041a8:	4606      	mov	r6, r0
 80041aa:	b118      	cbz	r0, 80041b4 <_vfiprintf_r+0x18>
 80041ac:	6983      	ldr	r3, [r0, #24]
 80041ae:	b90b      	cbnz	r3, 80041b4 <_vfiprintf_r+0x18>
 80041b0:	f7ff fde4 	bl	8003d7c <__sinit>
 80041b4:	4b89      	ldr	r3, [pc, #548]	; (80043dc <_vfiprintf_r+0x240>)
 80041b6:	429d      	cmp	r5, r3
 80041b8:	d11b      	bne.n	80041f2 <_vfiprintf_r+0x56>
 80041ba:	6875      	ldr	r5, [r6, #4]
 80041bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041be:	07d9      	lsls	r1, r3, #31
 80041c0:	d405      	bmi.n	80041ce <_vfiprintf_r+0x32>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d402      	bmi.n	80041ce <_vfiprintf_r+0x32>
 80041c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ca:	f7ff fe75 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	d501      	bpl.n	80041d8 <_vfiprintf_r+0x3c>
 80041d4:	692b      	ldr	r3, [r5, #16]
 80041d6:	b9eb      	cbnz	r3, 8004214 <_vfiprintf_r+0x78>
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f7ff fc46 	bl	8003a6c <__swsetup_r>
 80041e0:	b1c0      	cbz	r0, 8004214 <_vfiprintf_r+0x78>
 80041e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041e4:	07dc      	lsls	r4, r3, #31
 80041e6:	d50e      	bpl.n	8004206 <_vfiprintf_r+0x6a>
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	b01d      	add	sp, #116	; 0x74
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <_vfiprintf_r+0x244>)
 80041f4:	429d      	cmp	r5, r3
 80041f6:	d101      	bne.n	80041fc <_vfiprintf_r+0x60>
 80041f8:	68b5      	ldr	r5, [r6, #8]
 80041fa:	e7df      	b.n	80041bc <_vfiprintf_r+0x20>
 80041fc:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <_vfiprintf_r+0x248>)
 80041fe:	429d      	cmp	r5, r3
 8004200:	bf08      	it	eq
 8004202:	68f5      	ldreq	r5, [r6, #12]
 8004204:	e7da      	b.n	80041bc <_vfiprintf_r+0x20>
 8004206:	89ab      	ldrh	r3, [r5, #12]
 8004208:	0598      	lsls	r0, r3, #22
 800420a:	d4ed      	bmi.n	80041e8 <_vfiprintf_r+0x4c>
 800420c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800420e:	f7ff fe54 	bl	8003eba <__retarget_lock_release_recursive>
 8004212:	e7e9      	b.n	80041e8 <_vfiprintf_r+0x4c>
 8004214:	2300      	movs	r3, #0
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	2320      	movs	r3, #32
 800421a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800421e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004222:	2330      	movs	r3, #48	; 0x30
 8004224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043e8 <_vfiprintf_r+0x24c>
 8004228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800422c:	f04f 0901 	mov.w	r9, #1
 8004230:	4623      	mov	r3, r4
 8004232:	469a      	mov	sl, r3
 8004234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004238:	b10a      	cbz	r2, 800423e <_vfiprintf_r+0xa2>
 800423a:	2a25      	cmp	r2, #37	; 0x25
 800423c:	d1f9      	bne.n	8004232 <_vfiprintf_r+0x96>
 800423e:	ebba 0b04 	subs.w	fp, sl, r4
 8004242:	d00b      	beq.n	800425c <_vfiprintf_r+0xc0>
 8004244:	465b      	mov	r3, fp
 8004246:	4622      	mov	r2, r4
 8004248:	4629      	mov	r1, r5
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff ff93 	bl	8004176 <__sfputs_r>
 8004250:	3001      	adds	r0, #1
 8004252:	f000 80aa 	beq.w	80043aa <_vfiprintf_r+0x20e>
 8004256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004258:	445a      	add	r2, fp
 800425a:	9209      	str	r2, [sp, #36]	; 0x24
 800425c:	f89a 3000 	ldrb.w	r3, [sl]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a2 	beq.w	80043aa <_vfiprintf_r+0x20e>
 8004266:	2300      	movs	r3, #0
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004270:	f10a 0a01 	add.w	sl, sl, #1
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	9307      	str	r3, [sp, #28]
 8004278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800427c:	931a      	str	r3, [sp, #104]	; 0x68
 800427e:	4654      	mov	r4, sl
 8004280:	2205      	movs	r2, #5
 8004282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004286:	4858      	ldr	r0, [pc, #352]	; (80043e8 <_vfiprintf_r+0x24c>)
 8004288:	f7fb ffa2 	bl	80001d0 <memchr>
 800428c:	9a04      	ldr	r2, [sp, #16]
 800428e:	b9d8      	cbnz	r0, 80042c8 <_vfiprintf_r+0x12c>
 8004290:	06d1      	lsls	r1, r2, #27
 8004292:	bf44      	itt	mi
 8004294:	2320      	movmi	r3, #32
 8004296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800429a:	0713      	lsls	r3, r2, #28
 800429c:	bf44      	itt	mi
 800429e:	232b      	movmi	r3, #43	; 0x2b
 80042a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042a4:	f89a 3000 	ldrb.w	r3, [sl]
 80042a8:	2b2a      	cmp	r3, #42	; 0x2a
 80042aa:	d015      	beq.n	80042d8 <_vfiprintf_r+0x13c>
 80042ac:	9a07      	ldr	r2, [sp, #28]
 80042ae:	4654      	mov	r4, sl
 80042b0:	2000      	movs	r0, #0
 80042b2:	f04f 0c0a 	mov.w	ip, #10
 80042b6:	4621      	mov	r1, r4
 80042b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042bc:	3b30      	subs	r3, #48	; 0x30
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d94e      	bls.n	8004360 <_vfiprintf_r+0x1c4>
 80042c2:	b1b0      	cbz	r0, 80042f2 <_vfiprintf_r+0x156>
 80042c4:	9207      	str	r2, [sp, #28]
 80042c6:	e014      	b.n	80042f2 <_vfiprintf_r+0x156>
 80042c8:	eba0 0308 	sub.w	r3, r0, r8
 80042cc:	fa09 f303 	lsl.w	r3, r9, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	46a2      	mov	sl, r4
 80042d6:	e7d2      	b.n	800427e <_vfiprintf_r+0xe2>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	1d19      	adds	r1, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	9103      	str	r1, [sp, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfbb      	ittet	lt
 80042e4:	425b      	neglt	r3, r3
 80042e6:	f042 0202 	orrlt.w	r2, r2, #2
 80042ea:	9307      	strge	r3, [sp, #28]
 80042ec:	9307      	strlt	r3, [sp, #28]
 80042ee:	bfb8      	it	lt
 80042f0:	9204      	strlt	r2, [sp, #16]
 80042f2:	7823      	ldrb	r3, [r4, #0]
 80042f4:	2b2e      	cmp	r3, #46	; 0x2e
 80042f6:	d10c      	bne.n	8004312 <_vfiprintf_r+0x176>
 80042f8:	7863      	ldrb	r3, [r4, #1]
 80042fa:	2b2a      	cmp	r3, #42	; 0x2a
 80042fc:	d135      	bne.n	800436a <_vfiprintf_r+0x1ce>
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	9203      	str	r2, [sp, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	f04f 33ff 	movlt.w	r3, #4294967295
 800430e:	3402      	adds	r4, #2
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043f8 <_vfiprintf_r+0x25c>
 8004316:	7821      	ldrb	r1, [r4, #0]
 8004318:	2203      	movs	r2, #3
 800431a:	4650      	mov	r0, sl
 800431c:	f7fb ff58 	bl	80001d0 <memchr>
 8004320:	b140      	cbz	r0, 8004334 <_vfiprintf_r+0x198>
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	eba0 000a 	sub.w	r0, r0, sl
 8004328:	fa03 f000 	lsl.w	r0, r3, r0
 800432c:	9b04      	ldr	r3, [sp, #16]
 800432e:	4303      	orrs	r3, r0
 8004330:	3401      	adds	r4, #1
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004338:	482c      	ldr	r0, [pc, #176]	; (80043ec <_vfiprintf_r+0x250>)
 800433a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800433e:	2206      	movs	r2, #6
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	2800      	cmp	r0, #0
 8004346:	d03f      	beq.n	80043c8 <_vfiprintf_r+0x22c>
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <_vfiprintf_r+0x254>)
 800434a:	bb1b      	cbnz	r3, 8004394 <_vfiprintf_r+0x1f8>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	3307      	adds	r3, #7
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	3308      	adds	r3, #8
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	443b      	add	r3, r7
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	e767      	b.n	8004230 <_vfiprintf_r+0x94>
 8004360:	fb0c 3202 	mla	r2, ip, r2, r3
 8004364:	460c      	mov	r4, r1
 8004366:	2001      	movs	r0, #1
 8004368:	e7a5      	b.n	80042b6 <_vfiprintf_r+0x11a>
 800436a:	2300      	movs	r3, #0
 800436c:	3401      	adds	r4, #1
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	4619      	mov	r1, r3
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4620      	mov	r0, r4
 8004378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437c:	3a30      	subs	r2, #48	; 0x30
 800437e:	2a09      	cmp	r2, #9
 8004380:	d903      	bls.n	800438a <_vfiprintf_r+0x1ee>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0c5      	beq.n	8004312 <_vfiprintf_r+0x176>
 8004386:	9105      	str	r1, [sp, #20]
 8004388:	e7c3      	b.n	8004312 <_vfiprintf_r+0x176>
 800438a:	fb0c 2101 	mla	r1, ip, r1, r2
 800438e:	4604      	mov	r4, r0
 8004390:	2301      	movs	r3, #1
 8004392:	e7f0      	b.n	8004376 <_vfiprintf_r+0x1da>
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	462a      	mov	r2, r5
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <_vfiprintf_r+0x258>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4630      	mov	r0, r6
 80043a0:	f3af 8000 	nop.w
 80043a4:	4607      	mov	r7, r0
 80043a6:	1c78      	adds	r0, r7, #1
 80043a8:	d1d6      	bne.n	8004358 <_vfiprintf_r+0x1bc>
 80043aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ac:	07d9      	lsls	r1, r3, #31
 80043ae:	d405      	bmi.n	80043bc <_vfiprintf_r+0x220>
 80043b0:	89ab      	ldrh	r3, [r5, #12]
 80043b2:	059a      	lsls	r2, r3, #22
 80043b4:	d402      	bmi.n	80043bc <_vfiprintf_r+0x220>
 80043b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043b8:	f7ff fd7f 	bl	8003eba <__retarget_lock_release_recursive>
 80043bc:	89ab      	ldrh	r3, [r5, #12]
 80043be:	065b      	lsls	r3, r3, #25
 80043c0:	f53f af12 	bmi.w	80041e8 <_vfiprintf_r+0x4c>
 80043c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043c6:	e711      	b.n	80041ec <_vfiprintf_r+0x50>
 80043c8:	ab03      	add	r3, sp, #12
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	462a      	mov	r2, r5
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <_vfiprintf_r+0x258>)
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 f880 	bl	80044d8 <_printf_i>
 80043d8:	e7e4      	b.n	80043a4 <_vfiprintf_r+0x208>
 80043da:	bf00      	nop
 80043dc:	08004b6c 	.word	0x08004b6c
 80043e0:	08004b8c 	.word	0x08004b8c
 80043e4:	08004b4c 	.word	0x08004b4c
 80043e8:	08004bac 	.word	0x08004bac
 80043ec:	08004bb6 	.word	0x08004bb6
 80043f0:	00000000 	.word	0x00000000
 80043f4:	08004177 	.word	0x08004177
 80043f8:	08004bb2 	.word	0x08004bb2

080043fc <_printf_common>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	4616      	mov	r6, r2
 8004402:	4699      	mov	r9, r3
 8004404:	688a      	ldr	r2, [r1, #8]
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800440c:	4293      	cmp	r3, r2
 800440e:	bfb8      	it	lt
 8004410:	4613      	movlt	r3, r2
 8004412:	6033      	str	r3, [r6, #0]
 8004414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004418:	4607      	mov	r7, r0
 800441a:	460c      	mov	r4, r1
 800441c:	b10a      	cbz	r2, 8004422 <_printf_common+0x26>
 800441e:	3301      	adds	r3, #1
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	0699      	lsls	r1, r3, #26
 8004426:	bf42      	ittt	mi
 8004428:	6833      	ldrmi	r3, [r6, #0]
 800442a:	3302      	addmi	r3, #2
 800442c:	6033      	strmi	r3, [r6, #0]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d106      	bne.n	8004444 <_printf_common+0x48>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	6832      	ldr	r2, [r6, #0]
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	42ab      	cmp	r3, r5
 8004442:	dc26      	bgt.n	8004492 <_printf_common+0x96>
 8004444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004448:	1e13      	subs	r3, r2, #0
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	bf18      	it	ne
 800444e:	2301      	movne	r3, #1
 8004450:	0692      	lsls	r2, r2, #26
 8004452:	d42b      	bmi.n	80044ac <_printf_common+0xb0>
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	4649      	mov	r1, r9
 800445a:	4638      	mov	r0, r7
 800445c:	47c0      	blx	r8
 800445e:	3001      	adds	r0, #1
 8004460:	d01e      	beq.n	80044a0 <_printf_common+0xa4>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	68e5      	ldr	r5, [r4, #12]
 8004466:	6832      	ldr	r2, [r6, #0]
 8004468:	f003 0306 	and.w	r3, r3, #6
 800446c:	2b04      	cmp	r3, #4
 800446e:	bf08      	it	eq
 8004470:	1aad      	subeq	r5, r5, r2
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	6922      	ldr	r2, [r4, #16]
 8004476:	bf0c      	ite	eq
 8004478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800447c:	2500      	movne	r5, #0
 800447e:	4293      	cmp	r3, r2
 8004480:	bfc4      	itt	gt
 8004482:	1a9b      	subgt	r3, r3, r2
 8004484:	18ed      	addgt	r5, r5, r3
 8004486:	2600      	movs	r6, #0
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xc8>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xa8>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xac>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c6      	b.n	800443a <_printf_common+0x3e>
 80044ac:	18e1      	adds	r1, r4, r3
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	2030      	movs	r0, #48	; 0x30
 80044b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b6:	4422      	add	r2, r4
 80044b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c0:	3302      	adds	r3, #2
 80044c2:	e7c7      	b.n	8004454 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa4>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x8e>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	7e0f      	ldrb	r7, [r1, #24]
 80044de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044e0:	2f78      	cmp	r7, #120	; 0x78
 80044e2:	4691      	mov	r9, r2
 80044e4:	4680      	mov	r8, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	469a      	mov	sl, r3
 80044ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d8 	beq.w	80046aa <_printf_i+0x1d2>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80a3 	beq.w	8004646 <_printf_i+0x16e>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a101      	add	r1, pc, #4	; (adr r1, 8004518 <_printf_i+0x40>)
 8004514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004691 	.word	0x08004691
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004673 	.word	0x08004673
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046b3 	.word	0x080046b3
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800467b 	.word	0x0800467b
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e0a3      	b.n	80046cc <_printf_i+0x1f4>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	6829      	ldr	r1, [r5, #0]
 8004588:	0606      	lsls	r6, r0, #24
 800458a:	f101 0304 	add.w	r3, r1, #4
 800458e:	d50a      	bpl.n	80045a6 <_printf_i+0xce>
 8004590:	680e      	ldr	r6, [r1, #0]
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	2e00      	cmp	r6, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xc8>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	4276      	negs	r6, r6
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	485e      	ldr	r0, [pc, #376]	; (800471c <_printf_i+0x244>)
 80045a2:	230a      	movs	r3, #10
 80045a4:	e019      	b.n	80045da <_printf_i+0x102>
 80045a6:	680e      	ldr	r6, [r1, #0]
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ae:	bf18      	it	ne
 80045b0:	b236      	sxthne	r6, r6
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0xbc>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1d19      	adds	r1, r3, #4
 80045ba:	6029      	str	r1, [r5, #0]
 80045bc:	0601      	lsls	r1, r0, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xec>
 80045c0:	681e      	ldr	r6, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0xf2>
 80045c4:	0646      	lsls	r6, r0, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xe8>
 80045c8:	881e      	ldrh	r6, [r3, #0]
 80045ca:	4854      	ldr	r0, [pc, #336]	; (800471c <_printf_i+0x244>)
 80045cc:	2f6f      	cmp	r7, #111	; 0x6f
 80045ce:	bf0c      	ite	eq
 80045d0:	2308      	moveq	r3, #8
 80045d2:	230a      	movne	r3, #10
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045da:	6865      	ldr	r5, [r4, #4]
 80045dc:	60a5      	str	r5, [r4, #8]
 80045de:	2d00      	cmp	r5, #0
 80045e0:	bfa2      	ittt	ge
 80045e2:	6821      	ldrge	r1, [r4, #0]
 80045e4:	f021 0104 	bicge.w	r1, r1, #4
 80045e8:	6021      	strge	r1, [r4, #0]
 80045ea:	b90e      	cbnz	r6, 80045f0 <_printf_i+0x118>
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	d04d      	beq.n	800468c <_printf_i+0x1b4>
 80045f0:	4615      	mov	r5, r2
 80045f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80045f6:	fb03 6711 	mls	r7, r3, r1, r6
 80045fa:	5dc7      	ldrb	r7, [r0, r7]
 80045fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004600:	4637      	mov	r7, r6
 8004602:	42bb      	cmp	r3, r7
 8004604:	460e      	mov	r6, r1
 8004606:	d9f4      	bls.n	80045f2 <_printf_i+0x11a>
 8004608:	2b08      	cmp	r3, #8
 800460a:	d10b      	bne.n	8004624 <_printf_i+0x14c>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	07de      	lsls	r6, r3, #31
 8004610:	d508      	bpl.n	8004624 <_printf_i+0x14c>
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6861      	ldr	r1, [r4, #4]
 8004616:	4299      	cmp	r1, r3
 8004618:	bfde      	ittt	le
 800461a:	2330      	movle	r3, #48	; 0x30
 800461c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004624:	1b52      	subs	r2, r2, r5
 8004626:	6122      	str	r2, [r4, #16]
 8004628:	f8cd a000 	str.w	sl, [sp]
 800462c:	464b      	mov	r3, r9
 800462e:	aa03      	add	r2, sp, #12
 8004630:	4621      	mov	r1, r4
 8004632:	4640      	mov	r0, r8
 8004634:	f7ff fee2 	bl	80043fc <_printf_common>
 8004638:	3001      	adds	r0, #1
 800463a:	d14c      	bne.n	80046d6 <_printf_i+0x1fe>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	b004      	add	sp, #16
 8004642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004646:	4835      	ldr	r0, [pc, #212]	; (800471c <_printf_i+0x244>)
 8004648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800464c:	6829      	ldr	r1, [r5, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f851 6b04 	ldr.w	r6, [r1], #4
 8004654:	6029      	str	r1, [r5, #0]
 8004656:	061d      	lsls	r5, r3, #24
 8004658:	d514      	bpl.n	8004684 <_printf_i+0x1ac>
 800465a:	07df      	lsls	r7, r3, #31
 800465c:	bf44      	itt	mi
 800465e:	f043 0320 	orrmi.w	r3, r3, #32
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b91e      	cbnz	r6, 800466e <_printf_i+0x196>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2310      	movs	r3, #16
 8004670:	e7b0      	b.n	80045d4 <_printf_i+0xfc>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	2378      	movs	r3, #120	; 0x78
 800467c:	4828      	ldr	r0, [pc, #160]	; (8004720 <_printf_i+0x248>)
 800467e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004682:	e7e3      	b.n	800464c <_printf_i+0x174>
 8004684:	0659      	lsls	r1, r3, #25
 8004686:	bf48      	it	mi
 8004688:	b2b6      	uxthmi	r6, r6
 800468a:	e7e6      	b.n	800465a <_printf_i+0x182>
 800468c:	4615      	mov	r5, r2
 800468e:	e7bb      	b.n	8004608 <_printf_i+0x130>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	6826      	ldr	r6, [r4, #0]
 8004694:	6961      	ldr	r1, [r4, #20]
 8004696:	1d18      	adds	r0, r3, #4
 8004698:	6028      	str	r0, [r5, #0]
 800469a:	0635      	lsls	r5, r6, #24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	d501      	bpl.n	80046a4 <_printf_i+0x1cc>
 80046a0:	6019      	str	r1, [r3, #0]
 80046a2:	e002      	b.n	80046aa <_printf_i+0x1d2>
 80046a4:	0670      	lsls	r0, r6, #25
 80046a6:	d5fb      	bpl.n	80046a0 <_printf_i+0x1c8>
 80046a8:	8019      	strh	r1, [r3, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	4615      	mov	r5, r2
 80046b0:	e7ba      	b.n	8004628 <_printf_i+0x150>
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	602a      	str	r2, [r5, #0]
 80046b8:	681d      	ldr	r5, [r3, #0]
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	2100      	movs	r1, #0
 80046be:	4628      	mov	r0, r5
 80046c0:	f7fb fd86 	bl	80001d0 <memchr>
 80046c4:	b108      	cbz	r0, 80046ca <_printf_i+0x1f2>
 80046c6:	1b40      	subs	r0, r0, r5
 80046c8:	6060      	str	r0, [r4, #4]
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	2300      	movs	r3, #0
 80046d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d4:	e7a8      	b.n	8004628 <_printf_i+0x150>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	462a      	mov	r2, r5
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	47d0      	blx	sl
 80046e0:	3001      	adds	r0, #1
 80046e2:	d0ab      	beq.n	800463c <_printf_i+0x164>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	079b      	lsls	r3, r3, #30
 80046e8:	d413      	bmi.n	8004712 <_printf_i+0x23a>
 80046ea:	68e0      	ldr	r0, [r4, #12]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bfb8      	it	lt
 80046f2:	4618      	movlt	r0, r3
 80046f4:	e7a4      	b.n	8004640 <_printf_i+0x168>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4632      	mov	r2, r6
 80046fa:	4649      	mov	r1, r9
 80046fc:	4640      	mov	r0, r8
 80046fe:	47d0      	blx	sl
 8004700:	3001      	adds	r0, #1
 8004702:	d09b      	beq.n	800463c <_printf_i+0x164>
 8004704:	3501      	adds	r5, #1
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	9903      	ldr	r1, [sp, #12]
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	42ab      	cmp	r3, r5
 800470e:	dcf2      	bgt.n	80046f6 <_printf_i+0x21e>
 8004710:	e7eb      	b.n	80046ea <_printf_i+0x212>
 8004712:	2500      	movs	r5, #0
 8004714:	f104 0619 	add.w	r6, r4, #25
 8004718:	e7f5      	b.n	8004706 <_printf_i+0x22e>
 800471a:	bf00      	nop
 800471c:	08004bbd 	.word	0x08004bbd
 8004720:	08004bce 	.word	0x08004bce

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fc ff34 	bl	800159c <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000110 	.word	0x20000110

08004744 <__sread>:
 8004744:	b510      	push	{r4, lr}
 8004746:	460c      	mov	r4, r1
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	f000 f8a0 	bl	8004890 <_read_r>
 8004750:	2800      	cmp	r0, #0
 8004752:	bfab      	itete	ge
 8004754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004756:	89a3      	ldrhlt	r3, [r4, #12]
 8004758:	181b      	addge	r3, r3, r0
 800475a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800475e:	bfac      	ite	ge
 8004760:	6563      	strge	r3, [r4, #84]	; 0x54
 8004762:	81a3      	strhlt	r3, [r4, #12]
 8004764:	bd10      	pop	{r4, pc}

08004766 <__swrite>:
 8004766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476a:	461f      	mov	r7, r3
 800476c:	898b      	ldrh	r3, [r1, #12]
 800476e:	05db      	lsls	r3, r3, #23
 8004770:	4605      	mov	r5, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4616      	mov	r6, r2
 8004776:	d505      	bpl.n	8004784 <__swrite+0x1e>
 8004778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477c:	2302      	movs	r3, #2
 800477e:	2200      	movs	r2, #0
 8004780:	f000 f868 	bl	8004854 <_lseek_r>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	4632      	mov	r2, r6
 8004792:	463b      	mov	r3, r7
 8004794:	4628      	mov	r0, r5
 8004796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800479a:	f000 b817 	b.w	80047cc <_write_r>

0800479e <__sseek>:
 800479e:	b510      	push	{r4, lr}
 80047a0:	460c      	mov	r4, r1
 80047a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a6:	f000 f855 	bl	8004854 <_lseek_r>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	bf15      	itete	ne
 80047b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047ba:	81a3      	strheq	r3, [r4, #12]
 80047bc:	bf18      	it	ne
 80047be:	81a3      	strhne	r3, [r4, #12]
 80047c0:	bd10      	pop	{r4, pc}

080047c2 <__sclose>:
 80047c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c6:	f000 b813 	b.w	80047f0 <_close_r>
	...

080047cc <_write_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d07      	ldr	r5, [pc, #28]	; (80047ec <_write_r+0x20>)
 80047d0:	4604      	mov	r4, r0
 80047d2:	4608      	mov	r0, r1
 80047d4:	4611      	mov	r1, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	602a      	str	r2, [r5, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7fc fe8d 	bl	80014fa <_write>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_write_r+0x1e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_write_r+0x1e>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	20000110 	.word	0x20000110

080047f0 <_close_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d06      	ldr	r5, [pc, #24]	; (800480c <_close_r+0x1c>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fc fe99 	bl	8001532 <_close>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_close_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_close_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20000110 	.word	0x20000110

08004810 <_fstat_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4d07      	ldr	r5, [pc, #28]	; (8004830 <_fstat_r+0x20>)
 8004814:	2300      	movs	r3, #0
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	f7fc fe94 	bl	800154a <_fstat>
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	d102      	bne.n	800482c <_fstat_r+0x1c>
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	b103      	cbz	r3, 800482c <_fstat_r+0x1c>
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	20000110 	.word	0x20000110

08004834 <_isatty_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4d06      	ldr	r5, [pc, #24]	; (8004850 <_isatty_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc fe93 	bl	800156a <_isatty>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_isatty_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_isatty_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000110 	.word	0x20000110

08004854 <_lseek_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d07      	ldr	r5, [pc, #28]	; (8004874 <_lseek_r+0x20>)
 8004858:	4604      	mov	r4, r0
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	2200      	movs	r2, #0
 8004860:	602a      	str	r2, [r5, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f7fc fe8c 	bl	8001580 <_lseek>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_lseek_r+0x1e>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b103      	cbz	r3, 8004872 <_lseek_r+0x1e>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	20000110 	.word	0x20000110

08004878 <__malloc_lock>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__malloc_lock+0x8>)
 800487a:	f7ff bb1d 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 800487e:	bf00      	nop
 8004880:	20000104 	.word	0x20000104

08004884 <__malloc_unlock>:
 8004884:	4801      	ldr	r0, [pc, #4]	; (800488c <__malloc_unlock+0x8>)
 8004886:	f7ff bb18 	b.w	8003eba <__retarget_lock_release_recursive>
 800488a:	bf00      	nop
 800488c:	20000104 	.word	0x20000104

08004890 <_read_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	; (80048b0 <_read_r+0x20>)
 8004894:	4604      	mov	r4, r0
 8004896:	4608      	mov	r0, r1
 8004898:	4611      	mov	r1, r2
 800489a:	2200      	movs	r2, #0
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7fc fe0e 	bl	80014c0 <_read>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_read_r+0x1e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_read_r+0x1e>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000110 	.word	0x20000110

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
